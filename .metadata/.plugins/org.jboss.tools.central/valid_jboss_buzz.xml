<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Get started with reactive programming with creative Coderland tutorials</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xfiqajvPhz0/" /><category term="JBoss A-MQ" /><category term="Microservices" /><category term="OpenShift" /><category term="Red Hat JBoss Data Grid" /><category term="coderland" /><category term="microservices" /><category term="reactive programming" /><category term="Reactive Systems" /><author><name>Doug Tidwell</name></author><id>https://developers.redhat.com/blog/?p=616957</id><updated>2019-07-31T07:05:19Z</updated><published>2019-07-31T07:05:19Z</published><content type="html">&lt;p&gt;The &lt;a href="https://developers.redhat.com/coderland/reactive/"&gt;Reactica roller coaster&lt;/a&gt; is the latest addition to &lt;a href="https://developers.redhat.com/coderland/"&gt;Coderland&lt;/a&gt;, our fictitious amusement park for developers. It illustrates the power of &lt;a href="http://reactivemanifesto.org"&gt;reactive computing&lt;/a&gt;, an important architecture for working with groups of microservices that use asynchronous data to work with each other.&lt;/p&gt; &lt;p&gt;In this scenario, we need to build a web app to display the constantly updated wait time for the coaster.&lt;/p&gt; &lt;p&gt;&lt;span id="more-616957"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The Reactica roller coaster&lt;/h2&gt; &lt;p&gt;The different microservices in the exercise produce events such as:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A guest gets in line for the coaster.&lt;/li&gt; &lt;li&gt;A guest gets on the coaster.&lt;/li&gt; &lt;li&gt;A guest gets off the coaster.&lt;/li&gt; &lt;li&gt;A ride starts, carrying some number of guests and changing the status of those guests from &amp;#8220;in line&amp;#8221; to &amp;#8220;on the ride.&amp;#8221;&lt;/li&gt; &lt;li&gt;A ride stops, changing the status of some number of guests to &amp;#8220;completed the ride.&amp;#8221;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The scenario uses &lt;a href="https://developers.redhat.com/products/amq/"&gt;Red Hat AMQ&lt;/a&gt; and &lt;a href="https://developers.redhat.com/products/datagrid/"&gt;Red Hat Data Grid&lt;/a&gt; to do its work. There is a component that generates new &lt;code&gt;User&lt;/code&gt; objects that get in line and new &lt;code&gt;Ride&lt;/code&gt; objects that take some &lt;code&gt;User&lt;/code&gt;s on the ride. The data about those &lt;code&gt;User&lt;/code&gt;s is stored in AMQ and the data grid; the details of the &lt;code&gt;Ride&lt;/code&gt; objects are stored in AMQ. From there, we have several components that watch the data grid and AMQ to change the status of the &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Ride&lt;/code&gt; objects over time.&lt;/p&gt; &lt;p&gt;The coaster illustrates the basic definition of reactive programming, as defined in &lt;a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754"&gt;Andre Staltz&amp;#8217;s reactive tutorial&lt;/a&gt;:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Reactive programming is programming with asynchronous data streams.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;By going through the articles and tutorials that accompany &lt;a href="https://www.github.com/reactica/rhte-demo"&gt;the Reactica repo&lt;/a&gt;, you can see how the microservices work together. You can also see the reactive principles of responsiveness and resiliency by stopping parts of the system. The rest of the system keeps working, and you can restart parts of the system and see how the whole application continues to work, recovering data that was created but not propagated across the system while some microservices were down.&lt;/p&gt; &lt;p&gt;Overall, we think it&amp;#8217;s a great introduction to reactive programming. And it&amp;#8217;s a lot of fun; we really enjoyed putting this content together and we hope you like it as well. As always, we&amp;#8217;d love to hear your feedback. You can leave comments in the articles or the YouTube videos, and contact us at &lt;a href="mailto:coderland@redhat.com"&gt;coderland@redhat.com&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Enjoy your visit to &lt;a href="https://developers.redhat.com/coderland/"&gt;Coderland&lt;/a&gt;!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fget-started-with-reactive-programming-with-creative-coderland-tutorials%2F&amp;#38;linkname=Get%20started%20with%20reactive%20programming%20with%20creative%20Coderland%20tutorials" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fget-started-with-reactive-programming-with-creative-coderland-tutorials%2F&amp;#38;linkname=Get%20started%20with%20reactive%20programming%20with%20creative%20Coderland%20tutorials" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fget-started-with-reactive-programming-with-creative-coderland-tutorials%2F&amp;#38;linkname=Get%20started%20with%20reactive%20programming%20with%20creative%20Coderland%20tutorials" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fget-started-with-reactive-programming-with-creative-coderland-tutorials%2F&amp;#38;linkname=Get%20started%20with%20reactive%20programming%20with%20creative%20Coderland%20tutorials" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fget-started-with-reactive-programming-with-creative-coderland-tutorials%2F&amp;#38;linkname=Get%20started%20with%20reactive%20programming%20with%20creative%20Coderland%20tutorials" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fget-started-with-reactive-programming-with-creative-coderland-tutorials%2F&amp;#38;linkname=Get%20started%20with%20reactive%20programming%20with%20creative%20Coderland%20tutorials" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fget-started-with-reactive-programming-with-creative-coderland-tutorials%2F&amp;#38;linkname=Get%20started%20with%20reactive%20programming%20with%20creative%20Coderland%20tutorials" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fget-started-with-reactive-programming-with-creative-coderland-tutorials%2F&amp;#038;title=Get%20started%20with%20reactive%20programming%20with%20creative%20Coderland%20tutorials" data-a2a-url="https://developers.redhat.com/blog/2019/07/31/get-started-with-reactive-programming-with-creative-coderland-tutorials/" data-a2a-title="Get started with reactive programming with creative Coderland tutorials"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/31/get-started-with-reactive-programming-with-creative-coderland-tutorials/"&gt;Get started with reactive programming with creative Coderland tutorials&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xfiqajvPhz0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The Reactica roller coaster is the latest addition to Coderland, our fictitious amusement park for developers. It illustrates the power of reactive computing, an important architecture for working with groups of microservices that use asynchronous data to work with each other. In this scenario, we need to build a web app to display the constantly [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/31/get-started-with-reactive-programming-with-creative-coderland-tutorials/"&gt;Get started with reactive programming with creative Coderland tutorials&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/31/get-started-with-reactive-programming-with-creative-coderland-tutorials/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">616957</post-id><dc:creator>Doug Tidwell</dc:creator><dc:date>2019-07-31T07:05:19Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/31/get-started-with-reactive-programming-with-creative-coderland-tutorials/</feedburner:origLink></entry><entry><title>Using the 3scale toolbox Jenkins Shared Library</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7vi4mCBcjPM/" /><category term="CI/CD" /><category term="DevOps" /><category term="Red Hat 3scale API Management" /><category term="Red Hat Integration" /><category term="API" /><category term="Jenkins" /><category term="Jenkins pipeline" /><author><name>Nicolas Massé</name></author><id>https://developers.redhat.com/blog/?p=612407</id><updated>2019-07-31T07:00:21Z</updated><published>2019-07-31T07:00:21Z</published><content type="html">&lt;p&gt;In the previous article of this series, &lt;a href="https://developers.redhat.com/blog/?p=612387"&gt;Deploy your API from a Jenkins Pipeline&lt;/a&gt;, we discovered how the 3scale toolbox can help you deploy your API from a Jenkins Pipeline on &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;/Kubernetes. In this article, we will improve the pipeline from the previous article to make it more robust, less verbose, and also offer more features by using the 3scale toolbox Jenkins Shared Library.&lt;span id="more-612407"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What needs to be improved&lt;/h2&gt; &lt;p&gt;Although it was not perfect, the pipeline we designed in the previous article was simple and self-contained. To support production workloads, however, some minor aspects need to be improved:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &amp;#8220;runToolbox&amp;#8221; helper method was duplicated in each pipeline.&lt;/li&gt; &lt;li&gt;There are several delays used in the &amp;#8220;runToolbox&amp;#8221; method and tuning those delays proved to be tricky.&lt;/li&gt; &lt;li&gt;Everything is hardcoded: if we need to change some API metadata, the Pipeline code needs to be updated. A &amp;#8220;manifest&amp;#8221; would separate the code from the configuration.&lt;/li&gt; &lt;li&gt;The test credentials are hardcoded. To match most companies&amp;#8217; security policies, we would need to generate those test credentials dynamically.&lt;/li&gt; &lt;li&gt;The &amp;#8220;runToolbox&amp;#8221; helper method has not been designed to handle multiple parallel runs of the 3scale toolbox.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;There is nothing hard or complicated with those improvements; that&amp;#8217;s the daily bread of every Jenkins Pipeline writer!&lt;/p&gt; &lt;h2&gt;Introducing the Toolbox Jenkins Shared Library&lt;/h2&gt; &lt;p&gt;To help the Jenkins Pipeline writer, the community around Red Hat Integration came up with a Jenkins Shared Library named &lt;a href="https://github.com/rh-integration/3scale-toolbox-jenkins"&gt;3scale-toolbox-jenkins&lt;/a&gt;. It features the following improvements:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;All the code has been factorized in a &lt;a href="https://jenkins.io/doc/book/pipeline/shared-libraries/"&gt;Jenkins Shared Library&lt;/a&gt; and can be reused in all your pipelines.&lt;/li&gt; &lt;li&gt;A polling loop is used everywhere the pipeline has to wait for an action to complete. No more delay to tune.&lt;/li&gt; &lt;li&gt;The Toolbox Jenkins Shared Library is fed with an API metadata manifest. You can change the API metadata without having to change your pipeline code.&lt;/li&gt; &lt;li&gt;The test credentials are generated dynamically from a hash-based message authentication code (HMAC) function. HMAC has been used instead of random data in order to remain idempotent. No matter how many runs of the Jenkins pipeline, the test credentials remain the same but still unguessable.&lt;/li&gt; &lt;li&gt;Multiple parallel runs of the toolbox are possible because all the Kubernetes objects are prefixed and labeled with the Jenkins build name and number.&lt;/li&gt; &lt;li&gt;It uses the &lt;a href="https://github.com/openshift/jenkins-client-plugin"&gt;Jenkins OpenShift Client plugin&lt;/a&gt; underneath, which makes it more reliable than the bare &lt;code&gt;oc&lt;/code&gt; command.&lt;/li&gt; &lt;li&gt;Semantic versioning is implemented to simplify the management of multiple API versions.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;First steps with the toolbox Jenkins Shared Library&lt;/h2&gt; &lt;p&gt;At the beginning of your Jenkins Pipeline, import the toolbox Jenkins Shared Library:&lt;/p&gt; &lt;pre&gt;library identifier: '3scale-toolbox-jenkins@master', retriever: modernSCM([$class: 'GitSCMSource', remote: 'https://github.com/rh-integration/3scale-toolbox-jenkins.git'])&lt;/pre&gt; &lt;p&gt;Declare a global variable that will hold the ThreescaleService object, so you can use it from the different stages of your pipeline:&lt;/p&gt; &lt;pre&gt;def service = null&lt;/pre&gt; &lt;p&gt;From an early stage of your Jenkins Pipeline, you can create the ThreescaleService object from your API metadata manifest:&lt;/p&gt; &lt;pre&gt;service = toolbox.prepareThreescaleService( openapi: [ filename: "swagger.json" ], environment: [ baseSystemName: "my_service" ], toolbox: [ openshiftProject: "toolbox", destination: "3scale-tenant", secretName: "3scale-toolbox" ], service: [:], applications: [ [ name: "my-test-app", description: "This is used for tests", plan: "test", account: "john" ] ], applicationPlans: [ [ systemName: "test", name: "Test", defaultPlan: true, published: true ], [ systemName: "silver", name: "Silver" ], [ artefactFile: "https://raw.githubusercontent.com/redhatHameed/API-Lifecycle-Mockup/master/testcase-01/plan.yaml"] ] )&lt;/pre&gt; &lt;p&gt;In this example, the API metadata manifest has been inlined in the Pipeline, but you can store it in a YAML file in your Git repository and load it using the &lt;a href="https://jenkins.io/doc/pipeline/steps/pipeline-utility-steps/#readyaml-read-yaml-from-files-in-the-workspace-or-text"&gt;readYAML step&lt;/a&gt;. This way, your API metadata can change but your pipeline code remains the same.&lt;/p&gt; &lt;p&gt;You can then create all the API management objects anywhere relevant in your pipeline:&lt;/p&gt; &lt;pre&gt;service.importOpenAPI() echo "Service with system_name ${service.environment.targetSystemName} created !" service.applyApplicationPlans() service.applyApplication()&lt;/pre&gt; &lt;p&gt;Running end-to-end tests is easy, too. Notice how the test credentials are managed automatically:&lt;/p&gt; &lt;pre&gt;def proxy = service.readProxy("sandbox") sh """ curl -vfk ${proxy.sandbox_endpoint}/api/beer -H 'api-key: ${service.applications[0].userkey}' curl -vfk ${proxy.sandbox_endpoint}/api/beer/Weissbier -H 'api-key: ${service.applications[0].userkey}' curl -vfk ${proxy.sandbox_endpoint}/api/beer/findByStatus/available -H 'api-key: ${service.applications[0].userkey}' """&lt;/pre&gt; &lt;p&gt;Finally, you can promote the new configuration to the production gateway:&lt;/p&gt; &lt;pre&gt;service.promoteToProduction()&lt;/pre&gt; &lt;h2&gt;Jenkins Pipeline examples&lt;/h2&gt; &lt;p&gt;We prepared a series of five Jenkins pipelines that showcase the use of the 3scale toolbox Jenkins Shared Library in different contexts:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A very simple API secured with API Keys and deployed in 3scale hosted.&lt;/li&gt; &lt;li&gt;An Open API (no security) deployed in a hybrid architecture: 3scale hosted and on-premises.&lt;/li&gt; &lt;li&gt;An API secured with OpenID Connect deployed in the same hybrid architecture.&lt;/li&gt; &lt;li&gt;The same API deployed in three different environments (DEV, TEST, and PROD)&lt;/li&gt; &lt;li&gt;An API deployed in those three environments and with semantic versioning applied (four versions released, combining different security schemes).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can find those examples in the &lt;a href="https://github.com/rh-integration/3scale-toolbox-jenkins-samples"&gt;3scale-toolbox-jenkins-samples repository&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you prefer a real-world example, the &lt;a href="https://github.com/rh-integration/IntegrationApp-Automation"&gt;IntegrationApp-Automation repository&lt;/a&gt; contains a composite application that showcases an API deployed through a Jenkins Pipeline.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, we presented a convenient way for Jenkins Pipeline writers to publish their APIs using the 3scale toolbox. This Jenkins Shared Library is presented as best practices and sample code for Jenkins Pipeline writers to use in their daily job. You can choose to reuse this library as-is and contribute to the upstream community or copy it and make it yours!&lt;/p&gt; &lt;h3&gt;Read more&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=608917"&gt;5 principles for deploying your API from a CI/CD pipeline&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=611307"&gt;3scale toolbox: Deploy an API from the CLI&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=612387"&gt;Deploy your API from a Jenkins Pipeline&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fusing-the-3scale-toolbox-jenkins-shared-library%2F&amp;#38;linkname=Using%20the%203scale%20toolbox%20Jenkins%20Shared%20Library" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fusing-the-3scale-toolbox-jenkins-shared-library%2F&amp;#38;linkname=Using%20the%203scale%20toolbox%20Jenkins%20Shared%20Library" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fusing-the-3scale-toolbox-jenkins-shared-library%2F&amp;#38;linkname=Using%20the%203scale%20toolbox%20Jenkins%20Shared%20Library" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fusing-the-3scale-toolbox-jenkins-shared-library%2F&amp;#38;linkname=Using%20the%203scale%20toolbox%20Jenkins%20Shared%20Library" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fusing-the-3scale-toolbox-jenkins-shared-library%2F&amp;#38;linkname=Using%20the%203scale%20toolbox%20Jenkins%20Shared%20Library" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fusing-the-3scale-toolbox-jenkins-shared-library%2F&amp;#38;linkname=Using%20the%203scale%20toolbox%20Jenkins%20Shared%20Library" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fusing-the-3scale-toolbox-jenkins-shared-library%2F&amp;#38;linkname=Using%20the%203scale%20toolbox%20Jenkins%20Shared%20Library" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fusing-the-3scale-toolbox-jenkins-shared-library%2F&amp;#038;title=Using%20the%203scale%20toolbox%20Jenkins%20Shared%20Library" data-a2a-url="https://developers.redhat.com/blog/2019/07/31/using-the-3scale-toolbox-jenkins-shared-library/" data-a2a-title="Using the 3scale toolbox Jenkins Shared Library"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/31/using-the-3scale-toolbox-jenkins-shared-library/"&gt;Using the 3scale toolbox Jenkins Shared Library&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7vi4mCBcjPM" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In the previous article of this series, Deploy your API from a Jenkins Pipeline, we discovered how the 3scale toolbox can help you deploy your API from a Jenkins Pipeline on Red Hat OpenShift/Kubernetes. In this article, we will improve the pipeline from the previous article to make it more robust, less verbose, and also [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/31/using-the-3scale-toolbox-jenkins-shared-library/"&gt;Using the 3scale toolbox Jenkins Shared Library&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/31/using-the-3scale-toolbox-jenkins-shared-library/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">612407</post-id><dc:creator>Nicolas Massé</dc:creator><dc:date>2019-07-31T07:00:21Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/31/using-the-3scale-toolbox-jenkins-shared-library/</feedburner:origLink></entry><entry><title>How to set up Red Hat CodeReady Studio 12: Process automation tooling</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Mp51uvvIhx0/" /><category term="CodeReady portfolio" /><category term="Developer Tools" /><category term="Java" /><category term="Modern App Dev" /><category term="CodeReady Workspaces" /><category term="developer" /><category term="developer tool" /><category term="Red Hat Process Automation Manager" /><author><name>Eric D. Schabell</name></author><id>https://developers.redhat.com/blog/?p=601417</id><updated>2019-07-30T07:00:51Z</updated><published>2019-07-30T07:00:51Z</published><content type="html">&lt;p&gt;The release of the latest Red Hat developer suite version 12 included a name change from Red Hat JBoss Developer Studio to &lt;a href="https://developers.redhat.com/products/codeready-studio/overview"&gt;Red Hat CodeReady Studio&lt;/a&gt;. The focus here is not on the Red Hat CodeReady Workspaces, a cloud and container development experience, but on the locally installed developers studio. Given that, you might have questions about how to get started with the various Red Hat integration, data, and process automation product toolsets that are not installed out of the box.&lt;/p&gt; &lt;p&gt;In this series of articles, we&amp;#8217;ll show how to install each set of tools and explain the various products they support. We hope these tips will help you make informed decisions about the tooling you might want to use on your next development project.&lt;/p&gt; &lt;p&gt;There are three different software packs that offer tooling for various Red Hat middleware technologies:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/05/29/how-to-set-up-red-hat-codeready-studio-12-integration-tooling/" target="_blank" rel="noopener noreferrer"&gt;Red Hat Integration Development&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Red Hat Process Automation Development&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;Red Hat Data Virtualization Development&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Here, we&amp;#8217;ll outline how to get started with the &lt;em&gt;Red Hat Process Automation tooling&lt;/em&gt; with any of the CodeReady Studio version 12 releases.&lt;/p&gt; &lt;div id="attachment_617047" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-617047" class="wp-image-617047 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/RH-automation-tooling-1024x356.png" alt="RH automation tooling" width="640" height="223" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/RH-automation-tooling-1024x356.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/RH-automation-tooling-300x104.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/RH-automation-tooling-768x267.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-617047" class="wp-caption-text"&gt;Overview of the development add-on tooling.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;&lt;span style="font-size: 16px;"&gt;Red Hat CodeReady Studio can be obtained through the &lt;/span&gt;&lt;a style="font-size: 16px;" href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html" target="_blank" rel="noopener noreferrer"&gt;Customer Portal&lt;/a&gt;&lt;span style="font-size: 16px;"&gt; (login required) or via the &lt;/span&gt;&lt;a style="font-size: 16px;" href="https://developers.redhat.com/products/devstudio/download/" target="_blank" rel="noopener noreferrer"&gt;early access downloads on developers.redhat.com&lt;/a&gt;&lt;span style="font-size: 16px;"&gt;. After installation, start it up and you will see a welcoming &lt;/span&gt;&lt;i style="font-size: 16px;"&gt;Red Hat Central&lt;/i&gt;&lt;span style="font-size: 16px;"&gt; tab with at the bottom a tab to look at the available toolsets labeled &lt;/span&gt;&lt;i style="font-size: 16px;"&gt;Software/Update&lt;/i&gt;&lt;span style="font-size: 16px;"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;Installation&lt;/h3&gt; &lt;div id="attachment_617057" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-617057" class="wp-image-617057 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/RH-automation-tooling-add-on-1024x501.png" alt="RH automation tooling add-on" width="640" height="313" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/RH-automation-tooling-add-on-1024x501.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/RH-automation-tooling-add-on-300x147.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/RH-automation-tooling-add-on-768x376.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-617057" class="wp-caption-text"&gt;Selecting process automation tooling add-on.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Clicking on the &lt;i&gt;Install/Update&lt;/i&gt; button starts the add-on installation, and restarting the CodeReady Studio at the end completes the process. If you are interested in what&amp;#8217;s being installed, you can check the pop-up listing of components and versions. Note that this will change as the early access progresses toward final releases.At the time of this writing, you have several options, which you can find on the &lt;i&gt;Software/Update&lt;/i&gt; tab. Selecting the &lt;i&gt;Software/Update &lt;/i&gt;tab at the bottom lists the Red Hat &lt;i&gt;Development &lt;/i&gt;tooling add-ons. Let&amp;#8217;s select &lt;i&gt;Red Hat Business Process and Rules Development&lt;/i&gt; check box. Note that if you previously installed any of these tooling add-ons, your list of options will not include them all.&lt;/p&gt; &lt;table class="tr-caption-container" cellspacing="0" cellpadding="0"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;a href="https://3.bp.blogspot.com/-GJHGBVDIGQ8/XNwUhNHNFOI/AAAAAAAAtrA/_zhh0Awzz7wDxJnMPFDKg8wXu3lRAKClACLcBGAs/s1600/Screenshot%2B2019-05-15%2Bat%2B15.30.17.png"&gt;&lt;img title="" src="https://3.bp.blogspot.com/-GJHGBVDIGQ8/XNwUhNHNFOI/AAAAAAAAtrA/_zhh0Awzz7wDxJnMPFDKg8wXu3lRAKClACLcBGAs/s320/Screenshot%2B2019-05-15%2Bat%2B15.30.17.png" alt="codeready studio" width="320" height="172" border="0" data-original-width="1600" data-original-height="865" /&gt;&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tr-caption"&gt;Installing components.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;Stay tuned for more articles that will detail the installation of the remaining development add-on tooling.&lt;/p&gt; &lt;h3&gt;Read more&lt;/h3&gt; &lt;p&gt;See below for development tooling needs on previous versions of the studio:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/05/29/how-to-set-up-red-hat-codeready-studio-12-integration-tooling/"&gt;How To Set up Integration Tooling for CodeReady Studio 12: Integration tooling&lt;/a&gt;&lt;/li&gt; &lt;li&gt;How To Set up Data Virtualization Tooling for CodeReady Studio 12 (coming soon&amp;#8230;)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fhow-to-set-up-red-hat-codeready-studio-12-process-automation-tooling%2F&amp;#38;linkname=How%20to%20set%20up%20Red%20Hat%20CodeReady%20Studio%2012%3A%20Process%20automation%20tooling" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fhow-to-set-up-red-hat-codeready-studio-12-process-automation-tooling%2F&amp;#38;linkname=How%20to%20set%20up%20Red%20Hat%20CodeReady%20Studio%2012%3A%20Process%20automation%20tooling" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fhow-to-set-up-red-hat-codeready-studio-12-process-automation-tooling%2F&amp;#38;linkname=How%20to%20set%20up%20Red%20Hat%20CodeReady%20Studio%2012%3A%20Process%20automation%20tooling" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fhow-to-set-up-red-hat-codeready-studio-12-process-automation-tooling%2F&amp;#38;linkname=How%20to%20set%20up%20Red%20Hat%20CodeReady%20Studio%2012%3A%20Process%20automation%20tooling" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fhow-to-set-up-red-hat-codeready-studio-12-process-automation-tooling%2F&amp;#38;linkname=How%20to%20set%20up%20Red%20Hat%20CodeReady%20Studio%2012%3A%20Process%20automation%20tooling" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fhow-to-set-up-red-hat-codeready-studio-12-process-automation-tooling%2F&amp;#38;linkname=How%20to%20set%20up%20Red%20Hat%20CodeReady%20Studio%2012%3A%20Process%20automation%20tooling" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fhow-to-set-up-red-hat-codeready-studio-12-process-automation-tooling%2F&amp;#38;linkname=How%20to%20set%20up%20Red%20Hat%20CodeReady%20Studio%2012%3A%20Process%20automation%20tooling" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fhow-to-set-up-red-hat-codeready-studio-12-process-automation-tooling%2F&amp;#038;title=How%20to%20set%20up%20Red%20Hat%20CodeReady%20Studio%2012%3A%20Process%20automation%20tooling" data-a2a-url="https://developers.redhat.com/blog/2019/07/30/how-to-set-up-red-hat-codeready-studio-12-process-automation-tooling/" data-a2a-title="How to set up Red Hat CodeReady Studio 12: Process automation tooling"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/30/how-to-set-up-red-hat-codeready-studio-12-process-automation-tooling/"&gt;How to set up Red Hat CodeReady Studio 12: Process automation tooling&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Mp51uvvIhx0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The release of the latest Red Hat developer suite version 12 included a name change from Red Hat JBoss Developer Studio to Red Hat CodeReady Studio. The focus here is not on the Red Hat CodeReady Workspaces, a cloud and container development experience, but on the locally installed developers studio. Given that, you might have [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/30/how-to-set-up-red-hat-codeready-studio-12-process-automation-tooling/"&gt;How to set up Red Hat CodeReady Studio 12: Process automation tooling&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/30/how-to-set-up-red-hat-codeready-studio-12-process-automation-tooling/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">601417</post-id><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-07-30T07:00:51Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/30/how-to-set-up-red-hat-codeready-studio-12-process-automation-tooling/</feedburner:origLink></entry><entry><title>Deploy your API from a Jenkins Pipeline</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/TPFg_9GFlLo/" /><category term="CI/CD" /><category term="DevOps" /><category term="Red Hat 3scale API Management" /><category term="Red Hat Integration" /><category term="API" /><category term="API-Management" /><category term="Jenkins" /><category term="Jenkins pipeline" /><author><name>Nicolas Massé</name></author><id>https://developers.redhat.com/blog/?p=612387</id><updated>2019-07-30T07:00:28Z</updated><published>2019-07-30T07:00:28Z</published><content type="html">&lt;p&gt;In a previous article, &lt;a href="https://developers.redhat.com/blog/?p=608917"&gt;5 principles for deploying your API from a CI/CD pipeline&lt;/a&gt;, we discovered the main steps required to deploy your API from a CI/CD pipeline and this can prove to be a tremendous amount of work. Hopefully, the latest release of Red Hat Integration greatly improved this situation by adding new capabilities to the 3scale CLI. In &lt;a href="https://developers.redhat.com/blog/?p=611307"&gt;3scale toolbox: Deploy an API from the CLI&lt;/a&gt;, we discovered how the 3scale toolbox strives to automate the delivery of APIs. In this article, we will discuss how the 3scale toolbox can help you deploy your API from a Jenkins pipeline on &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;/Kubernetes.&lt;span id="more-612387"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Running the 3scale toolbox from Jenkins&lt;/h2&gt; &lt;p&gt;When calling a CLI from within a Jenkins Pipeline, at least three different strategies are possible:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;You can create a custom Jenkins Slave image containing the CLI.&lt;/li&gt; &lt;li&gt;You can install the CLI on the fly during the pipeline run.&lt;/li&gt; &lt;li&gt;Or, you can spin up a Kubernetes Job or Pod calling the CLI in a container.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The custom Jenkins Slave has the drawback of being yet another container image to build, manage, troubleshoot, secure, etc. It also means credentials need to be managed from within Jenkins which require a proprietary plugin to apply RBAC on them. Installing the CLI on-the-fly works well for static binaries, such as jq or the oc command, but not so well for a Ruby program. Also, credentials need to be managed from within Jenkins.&lt;/p&gt; &lt;p&gt;The Kubernetes Job/Pod solution has the advantage of removing any dependency/preparatory work. It allows credentials management in OpenShift/Kubernetes (and thus subject to RBAC) and is future proof because it&amp;#8217;s the way the Tekton pipelines are working.&lt;/p&gt; &lt;p&gt;To deploy your API from a Jenkins Pipeline, run the 3scale toolbox as Kubernetes Jobs.&lt;/p&gt; &lt;h2&gt;Running the 3scale toolbox from Jenkins&lt;/h2&gt; &lt;p&gt;To run the 3scale toolbox as Kubernetes Jobs from a Jenkins Pipeline, we need to write a small helper function:&lt;/p&gt; &lt;pre&gt;def runToolbox(args) {  def kubernetesJob = [    "apiVersion": "batch/v1",    "kind": "Job",    "metadata": [      "name": "toolbox"    ],    "spec": [      "backoffLimit": 0,      "activeDeadlineSeconds": 300,      "template": [        "spec": [          "restartPolicy": "Never",          "containers": [            [              "name": "job",              "image": "quay.io/redhat/3scale-toolbox:master",              "imagePullPolicy": "Always",              "args": [ "3scale", "version" ],              "env": [                [ "name": "HOME", "value": "/config" ]              ],              "volumeMounts": [                [ "mountPath": "/config", "name": "toolbox-config" ],                [ "mountPath": "/artifacts", "name": "artifacts" ]              ]            ]          ],          "volumes": [            [ "name": "toolbox-config", "secret": [ "secretName": "3scale-toolbox" ] ],            [ "name": "artifacts", "configMap": [ "name": "openapi" ] ]          ]        ]      ]    ]   ]   kubernetesJob.spec.template.spec.containers[0].args = args   sh "rm -f -- job.yaml"  writeYaml file: "job.yaml", data: kubernetesJob  sh """  oc delete job toolbox --ignore-not-found  sleep 2  oc create -f job.yaml  sleep 20 # Adjust the sleep duration to your server velocity  """  def logs = sh(script: "oc logs -f job/toolbox", returnStdout: true)  echo logs  return logs }&lt;/pre&gt; &lt;p&gt;This function starts by defining a Kubernetes Job template that you can customize to match your environments. In particular, you can adjust:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;backoffLimit&lt;/em&gt;: Keep it at 0 during pipeline development and bump it to 2 once your pipeline is ready to use. The backoff limit determines how many attempts will be performed in case of error.&lt;/li&gt; &lt;li&gt;&lt;em&gt;activeDeadlineSeconds&lt;/em&gt;: 300 seconds should be plenty to complete a toolbox execution, but you might need to set it to a higher value if your servers are slow, very loaded or if your API contains a lot of operations.&lt;/li&gt; &lt;li&gt;&lt;em&gt;image&lt;/em&gt;: You can use the community image on &lt;a href="https://quay.io/repository/redhat/3scale-toolbox?tag=latest&amp;#38;tab=tags"&gt;quay.io&lt;/a&gt; or the official Red Hat image if you are a Red Hat customer (3scale-amp26/toolbox).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The Job template is then patched with the supplied command-line arguments. The resulting job is stored as a YAML file and deployed in OpenShift using the oc command. Just after the oc command, the pipeline waits a couple of seconds to allow the Kubernetes Job to create the container and let it transition from the &amp;#8220;ContainerCreated&amp;#8221; to &amp;#8220;Running&amp;#8221; state. You can adjust this wait time according to your server velocity or even better, replace it with a polling loop. Finally, once the container transitioned to the &amp;#8220;Running&amp;#8221; state, the function fetches its logs and returns them to the caller.&lt;/p&gt; &lt;p&gt;As you can see, the Job receives two mount points:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A Kubernetes Secret for the 3scale toolbox configuration file that contains the remote list.&lt;/li&gt; &lt;li&gt;A Kubernetes ConfigMap for the artefacts to provision (OpenAPI Specification file, Application Plan file, etc.).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The ConfigMap will be created by the Jenkins Pipeline. The secret is provisioned outside of the pipeline and subject to RBAC.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Provision the 3scale-toolbox secret&lt;/strong&gt; in the same OpenShift project as your Jenkins Master:&lt;/p&gt; &lt;pre&gt;3scale remote add 3scale-instance "&lt;a href="https://123...456@my-tenant-admin.3scale.net/"&gt;https://123...456@MY-TENANT-admin.3scale.net/&lt;/a&gt;" oc create secret generic 3scale-toolbox --from-file="$HOME/.3scalerc.yaml" &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the rest of this article, we are showcasing a 3scale hosted instance with hosted APIcast. When using self-managed APIcast or on-premises instance, some minor adjustments might be needed.&lt;/p&gt; &lt;h2&gt;Preparing a very simple Jenkins Pipeline to deploy your API&lt;/h2&gt; &lt;p&gt;On your Jenkins Master, create a new Pipeline and initiate the Pipeline scripts with some global variables (that you can later promote as pipeline parameters):&lt;/p&gt; &lt;pre&gt;def targetSystemName = "saas-usecase-apikey" def targetInstance = "3scale-instance" def privateBaseURL = "http://echo-api.3scale.net" def testUserKey = "azerty1234567890" def developerAccountId = "john" def publicStagingBaseURL = null def publicProductionBaseURL = null&lt;/pre&gt; &lt;p&gt;Those variables map directly to the well-known concepts of 3scale:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;targetSystemName&lt;/em&gt; is the identifier (system_name) of the service to be created.&lt;/li&gt; &lt;li&gt;&lt;em&gt;targetInstance&lt;/em&gt; is the name of the toolbox remote that you created above.&lt;/li&gt; &lt;li&gt;&lt;em&gt;privateBaseURL&lt;/em&gt; is the Private Base URL of the service.&lt;/li&gt; &lt;li&gt;&lt;em&gt;testUserKey&lt;/em&gt; is the User Key/API Key that will be used to perform an end-to-end test.&lt;/li&gt; &lt;li&gt;&lt;em&gt;developerAccountId&lt;/em&gt; is the identifier of the default &amp;#8220;Developer&amp;#8221; account (or the username of its admin: john).&lt;/li&gt; &lt;li&gt;&lt;em&gt;publicStagingBaseURL&lt;/em&gt; is the Public Staging Base URL of the service.&lt;/li&gt; &lt;li&gt;&lt;em&gt;publicProductionBaseURL&lt;/em&gt; is the Public Production Base URL of the service.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are using self-managed APIcast or an on-premise installation of 3scale, you would need to give a proper value to the publicStagingBaseURL and publicProductionBaseURL variables.&lt;/p&gt; &lt;h2&gt;Jenkins Pipeline stages to deploy your API&lt;/h2&gt; &lt;p&gt;In this section, we will implement the pipeline stages described in the previous article: &lt;a href="https://developers.redhat.com/blog/?p=608917"&gt;5 principles for deploying your API from a CI/CD pipeline&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Fetch the OpenAPI specification file&lt;/h3&gt; &lt;p&gt;Add a pipeline stage to fetch your OpenAPI specification file and provide it as a ConfigMap on OpenShift:&lt;/p&gt; &lt;pre&gt;node() {   stage("Fetch OpenAPI") {     sh """     curl -sfk -o swagger.json https://raw.githubusercontent.com/microcks/api-lifecycle/master/beer-catalog-demo/api-contracts/beer-catalog-api-swagger.json     oc delete configmap openapi --ignore-not-found     oc create configmap openapi --from-file="swagger.json"     """   }&lt;/pre&gt; &lt;p&gt;The OpenAPI specification contains the specifications needed to provision the API contract in 3scale:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Service metadata such as the name, version, maintainer, etc.&lt;/li&gt; &lt;li&gt;The payload schema.&lt;/li&gt; &lt;li&gt;The list of operations.&lt;/li&gt; &lt;li&gt;The security scheme used to secure the service.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Import the OpenAPI Specification file&lt;/h3&gt; &lt;p&gt;Add a pipeline stage that uses 3scale toolbox to import the OpenAPI specification file into 3scale:&lt;/p&gt; &lt;div&gt; &lt;pre&gt; stage("Import OpenAPI") { def tooboxArgs = [ "3scale", "import", "openapi", "-d", targetInstance, "/artifacts/swagger.json", "--override-private-base-url=${privateBaseURL}", "-t", targetSystemName ] if (publicStagingBaseURL !=null) { tooboxArgs += "--staging-public-base-url=${publicStagingBaseURL}" } if (publicProductionBaseURL !=null) { tooboxArgs += "--production-public-base-url=${publicProductionBaseURL}" } runToolbox(tooboxArgs) }&lt;/pre&gt; &lt;p&gt;This stage uses some groovy sugar to dynamically set the toolbox command-line arguments if the Public Staging or Production Base URLs are set.&lt;/p&gt; &lt;/div&gt; &lt;h3&gt;Create an application plan and an application&lt;/h3&gt; &lt;p&gt;Add pipeline stages that use toolbox to create a 3scale application plan and an application:&lt;/p&gt; &lt;pre&gt;  stage("Create an Application Plan") {     runToolbox([ "3scale", "application-plan", "apply", targetInstance, targetSystemName, "test", "-n", "Test Plan", "--default" ])   } stage("Create an Application") { runToolbox([ "3scale", "application", "apply", targetInstance, testUserKey, "--account=${developerAccountId}", "--name=Test Application", "--description=Created by Jenkins", "--plan=test", "--service=${targetSystemName}" ]) }&lt;/pre&gt; &lt;h3&gt;Run the end-to-end tests&lt;/h3&gt; &lt;p&gt;Add a stage that uses toolbox to run your end-to-end tests. To run the end-to-end tests when using 3scale hosted instances, you must fetch the proxy definition to extract the staging public URL; otherwise, you can directly reuse the publicStagingBaseURL variable defined above:&lt;/p&gt; &lt;pre&gt; stage("Run integration tests") {   if (publicStagingBaseURL == null) {     def proxyDefinition = runToolbox([ "3scale", "proxy", "show", targetInstance, targetSystemName, "sandbox" ])     def proxy = readJSON text: proxyDefinition     publicStagingBaseURL = proxy.content.proxy.sandbox_endpoint     }   sh """   echo "Public Staging Base URL is ${publicStagingBaseURL}"   echo "userkey is ${testUserKey}"   curl -vfk ${publicStagingBaseURL}/beer -H 'api-key: ${testUserKey}'   curl -vfk ${publicStagingBaseURL}/beer/Weissbier -H 'api-key: ${testUserKey}'   curl -vfk ${publicStagingBaseURL}/beer/findByStatus/available -H 'api-key: ${testUserKey}'   """   }&lt;/pre&gt; &lt;h3&gt;Promote the configuration to the production gateway&lt;/h3&gt; &lt;p&gt;Each 3scale service has two public URLs: one named &amp;#8220;staging&amp;#8221; and one named &amp;#8220;production.&amp;#8221; The staging URL is used to test the settings before actually applying the configuration. When the configuration is promoted, it is applied to the &amp;#8220;production&amp;#8221; gateway atomically.&lt;/p&gt; &lt;pre&gt;  stage("Promote to production") {   runToolbox([ "3scale", "proxy", "promote", targetInstance,  targetSystemName ])  } } &lt;/pre&gt; &lt;h2&gt;Use the 3scale toolbox to deploy your API from a Jenkins Pipeline&lt;/h2&gt; &lt;p&gt;Congratulations! You just deployed your API from a Jenkins Pipeline. &lt;a href="https://github.com/3scale/3scale_toolbox/blob/c30042dcd26044325bff8f6a1894bb36d846d570/examples/Jenkinsfile"&gt;The complete pipeline can be found here for reference&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This pipeline is far from perfect; nevertheless, it provides a solid basis for use in your pipelines. In the next article of this blog post series, we will discuss how some shortcomings of this pipeline can be enhanced: read &lt;a href="https://developers.redhat.com/blog/?p=612407"&gt;Using the 3scale toolbox Jenkins Shared Library&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Read more&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=608917"&gt;5 principles for deploying your API from a CI/CD pipeline&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=611307"&gt;3scale toolbox: Deploy an API from the CLI&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=612407"&gt;Using the 3scale toolbox Jenkins Shared Library&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fdeploy-your-api-from-a-jenkins-pipeline%2F&amp;#38;linkname=Deploy%20your%20API%20from%20a%20Jenkins%20Pipeline" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fdeploy-your-api-from-a-jenkins-pipeline%2F&amp;#38;linkname=Deploy%20your%20API%20from%20a%20Jenkins%20Pipeline" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fdeploy-your-api-from-a-jenkins-pipeline%2F&amp;#38;linkname=Deploy%20your%20API%20from%20a%20Jenkins%20Pipeline" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fdeploy-your-api-from-a-jenkins-pipeline%2F&amp;#38;linkname=Deploy%20your%20API%20from%20a%20Jenkins%20Pipeline" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fdeploy-your-api-from-a-jenkins-pipeline%2F&amp;#38;linkname=Deploy%20your%20API%20from%20a%20Jenkins%20Pipeline" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fdeploy-your-api-from-a-jenkins-pipeline%2F&amp;#38;linkname=Deploy%20your%20API%20from%20a%20Jenkins%20Pipeline" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fdeploy-your-api-from-a-jenkins-pipeline%2F&amp;#38;linkname=Deploy%20your%20API%20from%20a%20Jenkins%20Pipeline" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fdeploy-your-api-from-a-jenkins-pipeline%2F&amp;#038;title=Deploy%20your%20API%20from%20a%20Jenkins%20Pipeline" data-a2a-url="https://developers.redhat.com/blog/2019/07/30/deploy-your-api-from-a-jenkins-pipeline/" data-a2a-title="Deploy your API from a Jenkins Pipeline"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/30/deploy-your-api-from-a-jenkins-pipeline/"&gt;Deploy your API from a Jenkins Pipeline&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/TPFg_9GFlLo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In a previous article, 5 principles for deploying your API from a CI/CD pipeline, we discovered the main steps required to deploy your API from a CI/CD pipeline and this can prove to be a tremendous amount of work. Hopefully, the latest release of Red Hat Integration greatly improved this situation by adding new capabilities [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/30/deploy-your-api-from-a-jenkins-pipeline/"&gt;Deploy your API from a Jenkins Pipeline&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/30/deploy-your-api-from-a-jenkins-pipeline/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">612387</post-id><dc:creator>Nicolas Massé</dc:creator><dc:date>2019-07-30T07:00:28Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/30/deploy-your-api-from-a-jenkins-pipeline/</feedburner:origLink></entry><entry><title>Kogito, ergo Rules — Part 2: An All-Encompassing Execution Model for Rules</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/8pakuLZdavM/kogito-ergo-rules-part-2-all.html" /><category term="feed_group_name_drools" scheme="searchisko:content:tags" /><category term="feed_name_drools" scheme="searchisko:content:tags" /><author><name>Edoardo Vacchi</name></author><id>searchisko:content:id:jbossorg_blog-kogito_ergo_rules_part_2_an_all_encompassing_execution_model_for_rules</id><updated>2019-07-29T15:30:22Z</updated><published>2019-07-29T09:18:00Z</published><content type="html">&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://raw.githubusercontent.com/kiegroup/kogito-runtimes/master/docsimg/kogito.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="228" data-original-width="800" height="180" src="https://raw.githubusercontent.com/kiegroup/kogito-runtimes/master/docsimg/kogito.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;span style="font-family: inherit;"&gt;This is the &lt;i&gt;second post &lt;/i&gt;of a &lt;a href="http://blog.athico.com/2019/07/kogito-ergo-rules-part-1-bringing.html"&gt;series of updates&lt;/a&gt; on the Kogito initiative and our efforts to bring Drools to the cloud. In this post we delve into the details of &lt;b&gt;rule units&lt;/b&gt; and show you why we are excited about them.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 class="western"&gt;&lt;span style="font-size: 1.5em; font-weight:400"&gt;An All-Encompassing Execution Model for Rules&lt;/span&gt;&lt;/h2&gt;&lt;div&gt;If you’ve been carefully scrutinising the Drools manual looking for new features at every recent release, you may have noticed that the term &lt;b&gt;rule unit&lt;/b&gt; has been sitting there for a while, as an &lt;i&gt;extremely experimental feature&lt;/i&gt;. In short, a rule unit is both a &lt;b&gt;module&lt;/b&gt; for rules and a &lt;b&gt;unit of execution&lt;/b&gt;—the reason why we are not calling them &lt;i&gt;modules&lt;/i&gt; is to avoid confusion with &lt;i&gt;JVM modules&lt;/i&gt;. In Kogito, we are revisiting and expanding upon our original prototype. &lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;A &lt;b&gt;rule unit&lt;/b&gt; collects a set of rules together with the description of the working memory such rules act upon. The description of the working memory is written as a regular Java class, with &lt;i&gt;DataSource&lt;/i&gt; fields. Each data source represents a &lt;i&gt;typed partition&lt;/i&gt; of the working memory, and different types of data sources exist, with different features. For instance, in the following example we used an append-only data source, called &lt;i&gt;data stream.&lt;/i&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;script src="https://gist.github.com/evacchi/2efedbd1227519176e52bb8d1e2c97d1.js?file=MonitoringService.java"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="margin-bottom: 0in;"&gt;Rules of a given rule unit are collected in DRL files with the &lt;span style="font-family: &amp;quot;roboto mono&amp;quot; , monospace;"&gt;&lt;b&gt;unit&lt;/b&gt;&lt;/span&gt;declaration&lt;/div&gt;&lt;script src="https://gist.github.com/evacchi/2efedbd1227519176e52bb8d1e2c97d1.js?file=MonitoringService.drl.java"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="margin-bottom: 0in;"&gt;Each rule in a unit has visibility over &lt;i&gt;all&lt;/i&gt; the data sources that have been declared in the corresponding class. In fact, the class and the collection of DRL files of a unit form a &lt;i&gt;whole&lt;/i&gt;: you can think of such a whole as of &lt;i&gt;one single&lt;/i&gt; &lt;i&gt;class&lt;/i&gt;where &lt;i&gt;fields&lt;/i&gt; are &lt;i&gt;globals &lt;/i&gt;that are scoped to the current unit, and &lt;i&gt;methods &lt;/i&gt;are &lt;i&gt;rules&lt;/i&gt;. In fact, the use of fields supersedes the use of DRL globals.&lt;/div&gt;&lt;div class="separator" style="clear: both; margin: 1em; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-BCwCCb_D7S4/XT66U45tcgI/AAAAAAAADME/nwjoAsBIau08mrxpNeBhoZMrwFDyF3SSQCLcBGAs/s1600/kogito-part2-1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="465" data-original-width="1152" height="258" src="https://4.bp.blogspot.com/-BCwCCb_D7S4/XT66U45tcgI/AAAAAAAADME/nwjoAsBIau08mrxpNeBhoZMrwFDyF3SSQCLcBGAs/s640/kogito-part2-1.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div align="left" style="margin-bottom: 0in;"&gt;A rule unit is submitted for execution to a &lt;a href="https://4.bp.blogspot.com/-M9raRmeKPNQ/XT7DDRWF-DI/AAAAAAAADMc/81Z4vgcOwms4ZFFlSTRr_mpZHEilUFfNACPcBGAYYCw/s1600/unitsm.png"&gt;&lt;b&gt;scheduler&lt;/b&gt;&lt;/a&gt;&lt;b&gt;. &lt;/b&gt;Rule units may decide to &lt;b&gt;yield&lt;/b&gt; their execution to other rule units, effectively putting them into execution. For instance:&lt;/div&gt;&lt;script src="https://gist.github.com/evacchi/2efedbd1227519176e52bb8d1e2c97d1.js?file=IncomingEvent.drl.java"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div align="left" style="margin-bottom: 0in;"&gt;But rule units may be also put in a &lt;b&gt;long-running state&lt;/b&gt;. In this case, &lt;i&gt;other rule units&lt;/i&gt; may be run &lt;i&gt;concurrently at the same time&lt;/i&gt;; because DataSources can be &lt;b&gt;shared&lt;/b&gt; across units, units can be coordinated by exchanging messages.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-qJ32J_5kRgE/XT66_zufDvI/AAAAAAAADMM/XSE0ubDeGMY3TnoacHteLqlt2egj-aaXwCLcBGAs/s1600/kogito-part2-2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="388" data-original-width="806" height="308" src="https://3.bp.blogspot.com/-qJ32J_5kRgE/XT66_zufDvI/AAAAAAAADMM/XSE0ubDeGMY3TnoacHteLqlt2egj-aaXwCLcBGAs/s640/kogito-part2-2.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;Consider the following example:&lt;/div&gt;&lt;script src="https://gist.github.com/evacchi/2efedbd1227519176e52bb8d1e2c97d1.js?file=MonitoringService.drl.java"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="margin-bottom: 0in;"&gt;In a certain way, &lt;b&gt;rule units behave as “actors” exchanging messages&lt;/b&gt;. However, in a very distinctive way, rule units allow for much more complex chains of executions, that are proper to rule-based reasoning. For instance, &lt;a href="https://doc.akka.io/docs/akka/2.5.23/guide/tutorial_3.html"&gt;&lt;span style="color: #1155cc;"&gt;&lt;u&gt;consider this example from Akka's manual&lt;/u&gt;&lt;/span&gt;&lt;/a&gt;:&lt;/div&gt;&lt;script src="https://gist.github.com/evacchi/2efedbd1227519176e52bb8d1e2c97d1.js?file=akka.scala"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="margin-bottom: 0in;"&gt;As you can see, pattern matches in Akka are strictly over &lt;b&gt;single messages&lt;/b&gt;. This is unsurprising, because actors process one message at a time. In a rule engine, we are allowed to write several rules, reacting upon the &lt;b&gt;entire state of the working memory &lt;/b&gt;at the execution time: this significantly departs from a pure actor model design, but at the same time gives a great deal of flexibility in the way you may write the business logic of your application.&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;h4&gt;Data Sources &lt;/h4&gt; It is worth to spend a few words on data sources as well. The data source construct can be seen as both a &lt;b&gt;partition&lt;/b&gt; and an&lt;b&gt; abstraction&lt;/b&gt; over the traditional working memory. Different kinds of data sources will be available: full-featured &lt;b&gt;data stores&lt;/b&gt; may support to add, remove and update values, allowing for more traditional operations over the working memory; while the more constrained append-only &lt;b&gt;data streams&lt;/b&gt; would be easier to integrate with external data sources and data sinks, such as Camel connectors; such constraints would be also valuable to enable more advanced use cases, such as&lt;b&gt; parallel, thread-safe execution&lt;/b&gt; and &lt;b&gt;persisted shared channel &lt;/b&gt;(e.g.: Kafka) across nodes of an&lt;b&gt; OpenShift cluster&lt;/b&gt;, realizing a fully &lt;b&gt;distributed rule engine.&lt;/b&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;style type="text/css"&gt;p { margin-bottom: 0.1in; line-height: 115%; background: transparent none repeat scroll 0% 0%; }a:link { color: rgb(0, 0, 128); text-decoration: underline; }&lt;/style&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&amp;nbsp; &lt;br /&gt;&lt;h2 class="western" style="font-size:1.5em; font-weight:400"&gt;Kogito: ergo Cloud&lt;/h2&gt;&lt;div style="margin-bottom: 0in;"&gt;The parallel and distributed use cases are &lt;i&gt;intriguing&lt;/i&gt;, but we need to get there with &lt;i&gt;baby steps.&lt;/i&gt;However, this does not mean that the first steps won't be as exciting in their own way.&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;For &lt;a href="http://kogito.kie.org/"&gt;&lt;span style="color: #1155cc;"&gt;&lt;u&gt;&lt;b&gt;Kogito&lt;/b&gt;&lt;/u&gt;&lt;/span&gt;&lt;/a&gt;we want to stress the cloud-native, stateless use case, where &lt;b&gt;control flow&lt;/b&gt; is &lt;b&gt;externalized&lt;/b&gt; using &lt;b&gt;processes&lt;/b&gt; and, with the power of &lt;a href="https://quarkus.io/"&gt;&lt;span style="color: #1155cc;"&gt;&lt;u&gt;Quarkus&lt;/u&gt;&lt;/span&gt;&lt;/a&gt;we can compile this into super-fast native binaries. This is why in the next few weeks we will complete and release rule units for &lt;i&gt;automated REST service implementation&lt;/i&gt;. &lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;In this use case, the typed, Java-based declaration of a&lt;b&gt; rule unit&lt;/b&gt; is &lt;b&gt;automatically &lt;/b&gt;mapped to the signature of a REST endpoint. &lt;b&gt;POST&lt;/b&gt;ing to the endpoint implies instantiating the unit, inserting data into the data sources, firing rules, returning the response payload. The response is computed using a &lt;i&gt;user-provided query&lt;/i&gt;. For instance, consider this example:&lt;/div&gt;&lt;script src="https://gist.github.com/evacchi/2efedbd1227519176e52bb8d1e2c97d1.js?file=query.drl.java"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="margin-bottom: 0in;"&gt;Users may post events using the auto-generated &lt;span style="font-family: &amp;quot;roboto mono&amp;quot; , monospace;"&gt;/monitoring-service&lt;/span&gt;endpoint.&lt;/div&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/evacchi/2efedbd1227519176e52bb8d1e2c97d1.js?file=req.json"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="margin-bottom: 0in;"&gt;the reply will be the result of the query. In our case:&lt;/div&gt;&lt;script src="https://gist.github.com/evacchi/2efedbd1227519176e52bb8d1e2c97d1.js?file=resp.json"&gt;&lt;/script&gt; &lt;br /&gt;&lt;h2 style="font-size:1.5em; font-weight:400"&gt;Cloudy with a Chance of Rules&lt;/h2&gt;&lt;div style="margin-bottom: 0in;"&gt; We have presented our vision for the next generation of our rule engine in Kogito and beyond. The stateless use case is only the first step towards what we think will be a truly innovative take on rule engines. In the following months we will work on delivering better support for scheduling and deploying units in parallel (local) and distributed (on Openshift), so stay tuned for more. In the meantime, we do want to hear from you about the direction we are taking. &lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;The future of Drools is cloudy… and bright!&lt;/div&gt;&lt;div style="margin-bottom: 0in;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;style type="text/css"&gt;p { margin-bottom: 0.1in; line-height: 115%; background: transparent none repeat scroll 0% 0%; }a:link { color: rgb(0, 0, 128); text-decoration: underline; }&lt;/style&gt;&lt;/div&gt;&lt;style type="text/css"&gt;p { margin-bottom: 0.1in; line-height: 115%; background: transparent none repeat scroll 0% 0%; }a:link { color: rgb(0, 0, 128); text-decoration: underline; }&lt;/style&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=9agcEEYLpcE:TgtZ-DSTwc0:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=9agcEEYLpcE:TgtZ-DSTwc0:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=9agcEEYLpcE:TgtZ-DSTwc0:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=9agcEEYLpcE:TgtZ-DSTwc0:dnMXMwOfBR0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=dnMXMwOfBR0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=9agcEEYLpcE:TgtZ-DSTwc0:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=9agcEEYLpcE:TgtZ-DSTwc0:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=9agcEEYLpcE:TgtZ-DSTwc0:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=9agcEEYLpcE:TgtZ-DSTwc0:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=9agcEEYLpcE:TgtZ-DSTwc0:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=9agcEEYLpcE:TgtZ-DSTwc0:jWeZv7XsJd0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=jWeZv7XsJd0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/DroolsAtom/~4/9agcEEYLpcE" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/8pakuLZdavM" height="1" width="1" alt=""/&gt;</content><summary>This is the second post of a series of updates on the Kogito initiative and our efforts to bring Drools to the cloud. In this post we delve into the details of rule units and show you why we are excited about them. An All-Encompassing Execution Model for Rules If you’ve been carefully scrutinising the Drools manual looking for new features at every recent release, you may have noticed that the ter...</summary><dc:creator>Edoardo Vacchi</dc:creator><dc:date>2019-07-29T09:18:00Z</dc:date><feedburner:origLink>http://feeds.athico.com/~r/DroolsAtom/~3/9agcEEYLpcE/kogito-ergo-rules-part-2-all.html</feedburner:origLink></entry><entry><title>Red Hat Universal Base Image: How it works in 3 minutes or less</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HksMkzvKlXY/" /><category term="Universal Base Images (UBI)" /><category term="containers" /><category term="UBI" /><author><name>Mike Guerette</name></author><id>https://developers.redhat.com/blog/?p=615977</id><updated>2019-07-29T07:00:36Z</updated><published>2019-07-29T07:00:36Z</published><content type="html">&lt;p&gt;When we announced &lt;a href="https://developers.redhat.com/blog/2019/05/07/red-hat-enterprise-linux-8-now-generally-available/"&gt;Red Hat Enterprise Linux 8&lt;/a&gt; in May, we also &lt;a href="https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image"&gt;announced&lt;/a&gt; that all RHEL 8 base operating systems images, and many new RHEL 7 ones, would be available under the new &lt;a href="https://www.redhat.com/licenses/EULA_Red_Hat_Universal_Base_Image_English_20190422.pdf"&gt;Universal Base Image End User License Agreement (EULA)&lt;/a&gt;. If UBI is new for you, this article summarizes UBI, explains why you’d want to use it, and supplies a set of resources to get you started with UBI.  And, if you have questions, we just published a brand new &lt;a href="https://developers.redhat.com/articles/ubi-faq/"&gt;UBI FAQ&lt;/a&gt;.&lt;span id="more-615977"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What is UBI?&lt;/h2&gt; &lt;p&gt;Red Hat Universal Base Images (UBI) are OCI-compliant container base operating system images with complementary runtime languages and packages that are freely redistributable. Like previous RHEL base images, they are built from portions of Red Hat Enterprise Linux. UBI images can be obtained from the &lt;a href="https://access.redhat.com/containers/"&gt;Red Hat Container Catalog&lt;/a&gt; and be built and deployed anywhere.&lt;/p&gt; &lt;p&gt;And, you don’t need to be a Red Hat customer to use or redistribute them. Really.&lt;/p&gt; &lt;h2&gt;What’s included?&lt;/h2&gt; &lt;p&gt;The Red Hat Universal Base Image includes three things:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A set of three base images (Minimal, Standard, and Multi-service) are provided to provide optimum starting points for a variety of use cases. &lt;a href="https://developers.redhat.com/products/rhel/ubi/#assembly-field-sections-18555"&gt;Learn more.&lt;/a&gt;&lt;/li&gt; &lt;li&gt;A set of language runtime images (PHP, Perl, Python, Ruby, Node.js) enable you to start coding right away with the confidence that a Red Hat built container image provides.&lt;/li&gt; &lt;li&gt;A set of associated YUM repositories/channels include RPM packages and updates that allow you to add application dependencies and rebuild UBI container images anytime you want.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;UBI in action: How it works in just 3 minutes&lt;/h2&gt; &lt;p&gt;With UBI, you can containerize an app on one platform and share for deploying on another platform. In this video, Scott McCarty does a great job explaining how it works in just three minutes.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/VG7Y1mjVIE0?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Why should you use UBI?&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; — Saves development time by building a portable app.&lt;/p&gt; &lt;p&gt;Before UBI, you had to package your containerized app for each target that it needed to deploy on. Given this, containers were not really portable like zip or gif files are today. UBI lets you create the image once and deploy anywhere using enterprise-grade packages. The alternative is to use untrusted, unreliable, and/or inferior packages that won’t stand up to enterprise-grade demands. That approach is broken from the start.&lt;/p&gt; &lt;h3&gt;Special heads-up for ISVs—Red Hat Container Certification&lt;/h3&gt; &lt;p&gt;Customers have gotten nervous about how secure applications are. Red Hat has addressed this by offering container certification which gives confidence to anyone wanting to try and/or use your software. It’s a free service—just join the &lt;a href="https://developers.redhat.com/products/rhel/ubi/#assembly-field-sections-18515"&gt;Red Hat Technology partner program&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Get started&lt;/h2&gt; &lt;p&gt;Here are three steps to get started:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Download from UBI7 or UBI8 from the &lt;a href="https://access.redhat.com/containers/"&gt;Red Hat container catalog&lt;/a&gt;, and do what Scott has shown in the video above.&lt;/li&gt; &lt;li&gt;Next, do something with one of the runtime languages: PHP, Perl, Python, Ruby, or Node.js. You&amp;#8217;ll find these in the catalog, too (separate ones for RHEL 7 or 8).&lt;/li&gt; &lt;li&gt;Give us feedback; see below for ways to contact us.&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/rhel/ubi/"&gt;UBI information page.&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/ubi-faq/"&gt;UBI FAQ&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Email UBI questions and/or feedback to ubi AT redhat DOT com.&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.redhat.com/mailman/listinfo/ubi"&gt;Join&lt;/a&gt; the UBI community mailing list and follow UBI discussions.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fred-hat-universal-base-image-how-it-works-in-3-minutes-or-less%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Image%3A%20How%20it%20works%20in%203%20minutes%20or%20less" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fred-hat-universal-base-image-how-it-works-in-3-minutes-or-less%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Image%3A%20How%20it%20works%20in%203%20minutes%20or%20less" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fred-hat-universal-base-image-how-it-works-in-3-minutes-or-less%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Image%3A%20How%20it%20works%20in%203%20minutes%20or%20less" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fred-hat-universal-base-image-how-it-works-in-3-minutes-or-less%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Image%3A%20How%20it%20works%20in%203%20minutes%20or%20less" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fred-hat-universal-base-image-how-it-works-in-3-minutes-or-less%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Image%3A%20How%20it%20works%20in%203%20minutes%20or%20less" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fred-hat-universal-base-image-how-it-works-in-3-minutes-or-less%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Image%3A%20How%20it%20works%20in%203%20minutes%20or%20less" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fred-hat-universal-base-image-how-it-works-in-3-minutes-or-less%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Image%3A%20How%20it%20works%20in%203%20minutes%20or%20less" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fred-hat-universal-base-image-how-it-works-in-3-minutes-or-less%2F&amp;#038;title=Red%20Hat%20Universal%20Base%20Image%3A%20How%20it%20works%20in%203%20minutes%20or%20less" data-a2a-url="https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/" data-a2a-title="Red Hat Universal Base Image: How it works in 3 minutes or less"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/"&gt;Red Hat Universal Base Image: How it works in 3 minutes or less&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HksMkzvKlXY" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;When we announced Red Hat Enterprise Linux 8 in May, we also announced that all RHEL 8 base operating systems images, and many new RHEL 7 ones, would be available under the new Universal Base Image End User License Agreement (EULA). If UBI is new for you, this article summarizes UBI, explains why you’d want [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/"&gt;Red Hat Universal Base Image: How it works in 3 minutes or less&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">2</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">615977</post-id><dc:creator>Mike Guerette</dc:creator><dc:date>2019-07-29T07:00:36Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/</feedburner:origLink></entry><entry><title>3scale toolbox: Deploy an API from the CLI</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/WnKCPsQLzpc/" /><category term="Developer Tools" /><category term="Red Hat 3scale API Management" /><category term="Red Hat Integration" /><category term="API" /><category term="API lifecycle" /><category term="ci/cd" /><author><name>Nicolas Massé</name></author><id>https://developers.redhat.com/blog/?p=611307</id><updated>2019-07-29T07:00:32Z</updated><published>2019-07-29T07:00:32Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/blog/?p=608917"&gt;Deploying your API from a CI/CD pipeline&lt;/a&gt; can be a tremendous amount of work. The latest release of Red Hat Integration greatly improved this situation by adding new capabilities to the &lt;a href="https://developers.redhat.com/products/3scale/overview"&gt;3scale&lt;/a&gt; CLI. The 3scale CLI is named &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.4/html/api_devops/cli-toolbox"&gt;3scale toolbox&lt;/a&gt; and strives to help API administrators to operate their services as well as automate the delivery of their API through Continuous Delivery pipelines.&lt;/p&gt; &lt;p&gt;Having a standard CLI is a great advantage for our customers since they can use it in the CI/CD solution of their choice (Jenkins, GitLab CI, Ansible, Tekton, etc.). It is also a means for Red Hat to capture customer needs as much as possible and offer the same feature set to all our customers.&lt;span id="more-611307"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;3scale toolbox at a glance&lt;/h2&gt; &lt;p&gt;The 3scale toolbox can manage a wide variety of objects:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Services&lt;/strong&gt;: Import from a CSV or OpenAPI specification file.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Proxies:&lt;/strong&gt; Promote a proxy configuration to production, show the current configuration.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;ActiveDocs&lt;/strong&gt;: Manage the OpenAPI specification repository.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Policies&lt;/strong&gt;: Copy policies from a registry to another.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Methods&lt;/strong&gt; and &lt;strong&gt;metrics.&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Application plans&lt;/strong&gt;: Import application plans from an artefact file.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Applications&lt;/strong&gt;: Manage client applications.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Accounts&lt;/strong&gt;: Manage client accounts.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The 3scale toolbox follows the usual conventions from CLIs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Output a non-zero status code on error.&lt;/li&gt; &lt;li&gt;stderr contains error messages; stdout contains useful output.&lt;/li&gt; &lt;li&gt;For data that needs to be parsed by a script or pipeline, the 3scale toolbox can output JSON or YAML.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To those conventions, we added a key principle: most operations should be &lt;a href="https://en.wikipedia.org/wiki/Idempotence"&gt;idempotent&lt;/a&gt;. This means you can simply state how you want the system to be and the 3scale toolbox will act accordingly: update the existing configuration if it exists, create when missing. Idempotence will help you build more reliable pipeline in case of an outage or transient perturbation.&lt;/p&gt; &lt;h2&gt;Support status&lt;/h2&gt; &lt;p&gt;The 3scale toolbox is a supported component of the Red Hat Integration solution. It is supported natively on Red Hat Enterprise Linux (RHEL) and on OpenShift. On RHEL, the toolbox is provided by the RPM &amp;#8220;3scale-toolbox&amp;#8221; that comes with the channel &amp;#8220;rhel-7-server-3scale-amp-2.6-rpms.&amp;#8221; On OpenShift, the container image &amp;#8220;3scale-amp26/toolbox&amp;#8221; can be used.&lt;/p&gt; &lt;p&gt;In this release, we targeted Jenkins as the main use case for the 3scale toolbox, but you can use it with any other CI/CD solution as long as the toolbox &lt;a href="https://access.redhat.com/articles/2798521"&gt;runs on a supported configuration&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Target use cases&lt;/h2&gt; &lt;p&gt;The 3scale toolbox can be used to achieve a wide variety of use cases:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;CI/CD pipelines: Deploy your APIs continuously from your preferred CI/CD solution.&lt;/li&gt; &lt;li&gt;Disaster recovery plans: The 3scale toolbox can copy existing services and policies from one instance to another.&lt;/li&gt; &lt;li&gt;One-off scripts: Automate the deletion of unused services before a migration for instance.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Installation of the 3scale toolbox&lt;/h2&gt; &lt;p&gt;Install the toolbox on your Red Hat Enterprise Linux server by running:&lt;/p&gt; &lt;pre&gt;$ sudo yum install --enablerepo=rhel-7-server-3scale-amp-2.6-rpms 3scale-toolbox&lt;/pre&gt; &lt;p&gt;You can confirm the toolbox is installed by executing:&lt;/p&gt; &lt;pre&gt;$ 3scale --version 0.12.3&lt;/pre&gt; &lt;h2&gt;Configuration of the 3scale toolbox&lt;/h2&gt; &lt;p&gt;To use the toolbox, you will have to generate &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_3scale/2-saas/html-single/accounts/index#access_tokens"&gt;an access token that has write permission on the Account Management API.&lt;/a&gt; Then, you can add a &amp;#8220;remote&amp;#8221;:&lt;/p&gt; &lt;pre&gt;$ 3scale remote add 3scale-saas "https://123...456@MY-TENANT-admin.3scale.net/"&lt;/pre&gt; &lt;p&gt;You will have to replace &amp;#8220;123&amp;#8230;456&amp;#8221; with the access token generated previously and &amp;#8220;MY-TENANT&amp;#8221; with the name of your 3scale Admin Portal.&lt;/p&gt; &lt;p&gt;You can confirm the configuration is working by listing existing services (there must be at least one):&lt;/p&gt; &lt;pre&gt;$ 3scale service list 3scale-saas ID NAME SYSTEM_NAME 2555417757658 Echo API api&lt;/pre&gt; &lt;h2&gt;Simple use case: deploy an API from the CLI&lt;/h2&gt; &lt;p&gt;For the first contact, let&amp;#8217;s choose a very simple use case: we would like to deploy an API from the CLI and make sure it is working end-to-end.&lt;/p&gt; &lt;p&gt;First, fetch the OpenAPI Specification file of the Beer Catalog service:&lt;/p&gt; &lt;pre&gt;$ curl -sfk -o swagger.json https://raw.githubusercontent.com/microcks/api-lifecycle/master/beer-catalog-demo/api-contracts/beer-catalog-api-swagger.json&lt;/pre&gt; &lt;p&gt;Deploy the new service:&lt;/p&gt; &lt;pre&gt;$ 3scale import openapi -d 3scale-saas swagger.json --override-private-base-url=https://echo-api.3scale.net -t beer-catalog &lt;span class="s1"&gt;Created service id: 2555417822198, name: Beer Catalog API&lt;/span&gt; &lt;span class="s1"&gt;Service proxy updated&lt;/span&gt; &lt;span class="s1"&gt;destroying all mapping rules&lt;/span&gt; &lt;span class="s1"&gt;Created GET /beer/{name}$ endpoint&lt;/span&gt; &lt;span class="s1"&gt;Created GET /beer/findByStatus/{status}$ endpoint&lt;/span&gt; &lt;span class="s1"&gt;Created GET /beer$ endpoint&lt;/span&gt;&lt;/pre&gt; &lt;p&gt;Create an application plan:&lt;/p&gt; &lt;pre&gt;$ &lt;span class="pl-s"&gt;3scale &lt;/span&gt;&lt;span class="pl-s"&gt;application-plan &lt;/span&gt;&lt;span class="pl-s"&gt;apply 3scale-saas&lt;/span&gt; beer-catalog &lt;span class="pl-s"&gt;test &lt;/span&gt;&lt;span class="pl-s"&gt;-n &lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Test Plan&lt;span class="pl-pds"&gt;" &lt;/span&gt;&lt;/span&gt;&lt;span class="pl-s"&gt;--default &lt;/span&gt;&lt;span class="s1"&gt;Applied application plan id: 2357356113164; Default: true&lt;/span&gt;&lt;/pre&gt; &lt;p&gt;Create an application:&lt;/p&gt; &lt;pre&gt;$ 3scale application apply 3scale-saas 1234567890abcdef --account=john --name="Test Application" --description="Created from the CLI" --plan=test --service=beer-catalog &lt;span class="s1"&gt;Applied application id: 1409618501689&lt;/span&gt;&lt;/pre&gt; &lt;p&gt;Get the URL of the staging gateway:&lt;/p&gt; &lt;pre&gt;$ STAGING_URL=$(&lt;span class="s1"&gt;3scale proxy-config show 3scale-saas beer-catalog sandbox |jq -r .content.proxy.sandbox_endpoint) $ echo $STAGING_URL https://beer-catalog-2445582535750.staging.gw.apicast.io:443 &lt;/span&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; for this command to succeed, you will need to have &lt;a href="https://stedolan.github.io/jq/download/"&gt;jq installed&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Make sure the newly deployed API is working:&lt;/p&gt; &lt;pre&gt;$ &lt;span class="s1"&gt;curl -D - -H "api-key: 1234567890abcdef" "$STAGING_URL/beer"&lt;/span&gt; HTTP/1.1 200 OK Content-Type: application/json Content-Length: 730 Connection: keep-alive { "method": "GET", "path": "/beer", ... }&lt;/pre&gt; &lt;p&gt;Since the staging gateway is working perfectly, you can now promote the configuration to the production gateway:&lt;/p&gt; &lt;pre&gt;$ &lt;span class="s1"&gt;3scale proxy-config promote 3scale-saas beer-catalog&lt;/span&gt; &lt;span class="s1"&gt;Proxy Configuration version 2 promoted to 'production'&lt;/span&gt;&lt;/pre&gt; &lt;p&gt;Congratulations, your API is now up and running!&lt;/p&gt; &lt;h2&gt;Run the toolbox in a container&lt;/h2&gt; &lt;p&gt;In the previous examples, we ran the toolbox on a Red Hat Enterprise Linux server, but you can also run it in a container!&lt;/p&gt; &lt;p&gt;The first step would be to create a Kubernetes secret holding the toolbox configuration:&lt;/p&gt; &lt;pre&gt;$ oc create secret generic 3scale-toolbox --from-file="$HOME/.3scalerc.yaml" secret/3scale-toolbox created&lt;/pre&gt; &lt;p&gt;Create a ConfigMap holding the OpenAPI specification file you want to deploy:&lt;/p&gt; &lt;pre&gt;$ oc create configmap openapi --from-file=swagger.json configmap/openapi created&lt;/pre&gt; &lt;p&gt;Run the toolbox by creating a Kubernetes job:&lt;/p&gt; &lt;pre&gt;$ oc create -f - &amp;#60;&amp;#60;EOF apiVersion: batch/v1 kind: Job metadata: name: toolbox spec: backoffLimit: 0 activeDeadlineSeconds: 300 template: spec: restartPolicy: Never containers: - name: toolbox image: quay.io/redhat/3scale-toolbox:master imagePullPolicy: Always args: [ "3scale", "import", "openapi", "-d", "3scale-saas", "/artifacts/swagger.json", "--override-private-base-url=https://echo-api.3scale.net", "-t", "beer-catalog" ] env: - name: HOME value: /config volumeMounts: - name: toolbox-config mountPath: /config - name: artifacts mountPath: /artifacts volumes: - name: toolbox-config secret: secretName: 3scale-toolbox - name: artifacts configMap: name: openapi EOF&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The job definition above uses the community image. Red Hat customers can use this image instead: 3scale-amp26/toolbox.&lt;/p&gt; &lt;p&gt;Confirm the beer-catalog service has been updated:&lt;/p&gt; &lt;pre&gt;$ oc logs -f job/toolbox Updated service id: 2555417822198, name: Beer Catalog API Service proxy updated destroying all mapping rules Created GET /beer/{name}$ endpoint Created GET /beer/findByStatus/{status}$ endpoint Created GET /beer$ endpoint Activedocs exists, update!&lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;The 3scale toolbox is the basis for many automation involving APIs and the Red Hat Integration solution. It is a supported component that covers a wide range of use cases.&lt;/p&gt; &lt;p&gt;Discover how the API management capability of Red Hat Integration can help you deploy your API from a CI/CD pipeline:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=608917"&gt;5 principles for deploying your API from a CI/CD pipeline&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=612387"&gt;Deploy your API from a Jenkins Pipeline&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=612407"&gt;Using the 3scale toolbox Jenkins Shared Library&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2F3scale-toolbox-deploy-an-api-from-the-cli%2F&amp;#38;linkname=3scale%20toolbox%3A%20Deploy%20an%20API%20from%20the%20CLI" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2F3scale-toolbox-deploy-an-api-from-the-cli%2F&amp;#38;linkname=3scale%20toolbox%3A%20Deploy%20an%20API%20from%20the%20CLI" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2F3scale-toolbox-deploy-an-api-from-the-cli%2F&amp;#38;linkname=3scale%20toolbox%3A%20Deploy%20an%20API%20from%20the%20CLI" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2F3scale-toolbox-deploy-an-api-from-the-cli%2F&amp;#38;linkname=3scale%20toolbox%3A%20Deploy%20an%20API%20from%20the%20CLI" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2F3scale-toolbox-deploy-an-api-from-the-cli%2F&amp;#38;linkname=3scale%20toolbox%3A%20Deploy%20an%20API%20from%20the%20CLI" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2F3scale-toolbox-deploy-an-api-from-the-cli%2F&amp;#38;linkname=3scale%20toolbox%3A%20Deploy%20an%20API%20from%20the%20CLI" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2F3scale-toolbox-deploy-an-api-from-the-cli%2F&amp;#38;linkname=3scale%20toolbox%3A%20Deploy%20an%20API%20from%20the%20CLI" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2F3scale-toolbox-deploy-an-api-from-the-cli%2F&amp;#038;title=3scale%20toolbox%3A%20Deploy%20an%20API%20from%20the%20CLI" data-a2a-url="https://developers.redhat.com/blog/2019/07/29/3scale-toolbox-deploy-an-api-from-the-cli/" data-a2a-title="3scale toolbox: Deploy an API from the CLI"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/29/3scale-toolbox-deploy-an-api-from-the-cli/"&gt;3scale toolbox: Deploy an API from the CLI&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/WnKCPsQLzpc" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Deploying your API from a CI/CD pipeline can be a tremendous amount of work. The latest release of Red Hat Integration greatly improved this situation by adding new capabilities to the 3scale CLI. The 3scale CLI is named 3scale toolbox and strives to help API administrators to operate their services as well as automate the [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/29/3scale-toolbox-deploy-an-api-from-the-cli/"&gt;3scale toolbox: Deploy an API from the CLI&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/29/3scale-toolbox-deploy-an-api-from-the-cli/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">611307</post-id><dc:creator>Nicolas Massé</dc:creator><dc:date>2019-07-29T07:00:32Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/29/3scale-toolbox-deploy-an-api-from-the-cli/</feedburner:origLink></entry><entry><title>Guidelines for instruction encoding in the NOP space</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/1djWRPFjiQw/" /><category term="Containers" /><category term="Developer Tools" /><category term="Security" /><category term="ABI" /><author><name>Florian Weimer</name></author><id>https://developers.redhat.com/blog/?p=614477</id><updated>2019-07-29T07:00:23Z</updated><published>2019-07-29T07:00:23Z</published><content type="html">&lt;p&gt;More and more CPUs implement new features with instructions that are executed as NOPs (no-operation instructions) on previous CPU generations. This results in some challenges for operating system builders, particularly in the area of legacy software support.&lt;/p&gt; &lt;p&gt;&lt;span id="more-614477"&gt;&lt;/span&gt;An instruction that can be ignored completely by some CPUs does not seem useful, but it turns out that there are quite a few applications for it, including:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Performance hints, such as marking atomic loads and stores which are part of mutex lock and unlock operations.&lt;/li&gt; &lt;li&gt;Optional array bounds checking, as once implemented by Intel MPX.&lt;/li&gt; &lt;li&gt;Security hardening, such as verifying at load time that memory is read-only (and not writable), for making it harder to inject C++ vtables or bytecode.&lt;/li&gt; &lt;li&gt;Markers in the instruction stream, for control-flow integrity validation (e.g., Intel CET), or as hints to dynamic instrumentation tools, such as Valgrind.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Using an instruction encoding in the NOP space means that operating system and application developers can deliver a single set of binaries. These binaries work both on old CPUs and new CPUs. On old CPUs, due to their no-operation nature, the instructions and the information they provide is completely ignored. New CPUs that recognize the instructions can run the same binaries, which then benefit from the additional CPU features. There are a few caveats related so that this works smoothly in practice.&lt;/p&gt; &lt;h2&gt;NOP support between implementations can vary&lt;/h2&gt; &lt;p&gt;Most instruction sets have multiple independent implementations. Even if there is just a single CPU vendor for real silicon, distributions like Fedora and Red Hat Enterprise Linux deal with at least three implementation: the actual hardware, emulation support in QEMU, and the &lt;a href="http://valgrind.org/"&gt;Valgrind&lt;/a&gt; instruction decoder and compiler. If a new instruction should be in the NOP space but is not, according to one of the existing implementations, the results can be unpredictable. Often, these not-yet-implemented NOPs result in illegal instruction traps, which completely invalidates the reason for using instructions in the NOP space in the first place.&lt;/p&gt; &lt;p&gt;For example, the Intel x86 architecture initially supported only a limited length for NOP instructions. Support for longer NOPs first appeared in the Intel Pentium Pro CPU, but &lt;a href="https://sourceware.org/bugzilla/show_bug.cgi?id=6957"&gt;long NOP support was not present in all CPUs with an otherwise comparable feature set&lt;/a&gt;, resulting in interoperability issues. Binaries using long NOPs crashed with an illegal instruction trap on CPUs which did not support them.&lt;/p&gt; &lt;h2&gt;Changed NOP behavior needs to be optional&lt;/h2&gt; &lt;p&gt;As an additional safety measure, instructions in the NOP space should not become active immediately after merely upgrading the CPU. There are two reasons for this: a toolchain (compiler/assembler/linker combination) may have produced these NOPs by accident (e.g., a non-mainstream toolchain the CPU vendor is not tracking effectively). Or, there could be existing binaries with deliberate use of the NOP instructions. And because the NOPs have been ignored so far, not ignoring them could expose new bugs (incorrect results or crashes). These bugs could either be genuine toolchain bugs or simple misuse of the new feature by application developers who did not have an opportunity to test their code.&lt;/p&gt; &lt;p&gt;Both cases can be very challenging for users who want to upgrade their hardware. Software usually outlives hardware. It is not always possible to rebuild affected binaries from source code (or re-link them against updated libraries). Under such circumstances, new instructions in the NOP space can delay hardware updates indefinitely.&lt;/p&gt; &lt;p&gt;In the past, virtualization was a sufficient solution to this dilemma: The hypervisor could provide a CPU model that disables these NOP-space instructions, even though the physical CPU would support them. Of course, this still needs some level of support in the CPU for a split configuration: new instruction support for the hypervisor itself and some guests, but no support (true NOP operation) for other guests.  (Typically, system administrators do not want to disable security hardening features on the hypervisor for the sake of a single guest.)&lt;/p&gt; &lt;p&gt;In a container-based world, such coarse control does not appear to be sufficient. In environments with high security requirements (or multiple tenants), the container host and certain privileged containers will be expected to run with full hardening enhancements provided by NOP-space instructions. However, it is still desirable to provide full compatibility with container images that end users supply and that are affected by either or both bug categories described above. A boot-time configuration setting will often be too coarse-grained to be useful. (We recently encountered a similar trade-off between security hardening and compatibility with old container images in the context of &lt;code&gt;vsyscall&lt;/code&gt; page support on Linux.)&lt;/p&gt; &lt;h3&gt;How to make new behavior optional&lt;/h3&gt; &lt;p&gt;The low-level software interfaces to enable such selective support can take various forms.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Use ELF markup to enable the new CPU feature. The ELF loader in the kernel (or in the glibc dynamic loader) can inspect existing binaries and verify that everything has the required support level. If the dynamic loader in userspace is responsible for turning on support, there is an overlap with the next option.&lt;/li&gt; &lt;li&gt;Compatible binaries could explicitly opt in to the new behavior, using a system call (or a new sub-command for the &lt;code&gt;prctl&lt;/code&gt; or &lt;code&gt;arch_prctl&lt;/code&gt; system calls), or by setting a special CPU register (this is how &lt;code&gt;libmpx&lt;/code&gt; switched on Intel MPX). This setting would only apply to the current process or thread. (What makes sense here depends on the feature in question.) When the process image is replaced by a new one using &lt;code&gt;execve&lt;/code&gt;, support for the new instructions would revert to the default (disabled).&lt;/li&gt; &lt;li&gt;For the container use case, it could be interesting to have a system call and make the support state inheritable across &lt;code&gt;execve&lt;/code&gt;. This means that the entire process tree in a container would use the new CPU feature. It would be up to the container engine to make sure that the image is compatible with that, probably by inspecting metadata associated with the container image and conveying that information to the kernel via a system call.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;A concrete implementation involving kernel, hypervisor, CPU and perhaps firmware could take many forms.  The key point is that a single running operating system kernel must be able to support different feature activation states across its separate processes. Once the CPU and firmware support this capability, the kernel and hypervisor can collaborate to implement the per-process model. If it is just a boot-time option, either per guest or (worse) per physical host, enabling the feature in a container-based world is much more difficult.&lt;/p&gt; &lt;h2&gt;Coordination with dynamic instrumentation tools, such as Valgrind&lt;/h2&gt; &lt;p style="text-align: left;"&gt;Valgrind does not only emulate NOPs, it is also possible to embed special NOP-like instruction sequences using the &lt;a href="https://sourceware.org/git/gitweb.cgi?p=valgrind.git;a=blob;f=include/valgrind.h;h=HEAD"&gt;&lt;code&gt;valgrind.h&lt;/code&gt;&lt;/a&gt; header file. These instructions are (mostly) ignored when running on a real CPU, but they provide useful information to Valgrind when running under emulation. For example, they can explicitly mark memory as undefined when Valgrind assumes it is defined (based on previous program actions).&lt;/p&gt; &lt;p&gt;New NOP space instructions should not conflict with the marker instructions Valgrind uses.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Instructions in the NOP space are an attractive way to provide new performance and security features. However, some care is necessary to avoid conflicts with existing uses of NOP instructions. And, if such conflicts arise, end users will need a way to work around them, which means that the operating system they use will need to be able to enable and disable support for the new NOP-space instructions at the individual process level.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fguidelines-for-instruction-encoding-in-the-nop-space%2F&amp;#38;linkname=Guidelines%20for%20instruction%20encoding%20in%20the%20NOP%20space" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fguidelines-for-instruction-encoding-in-the-nop-space%2F&amp;#38;linkname=Guidelines%20for%20instruction%20encoding%20in%20the%20NOP%20space" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fguidelines-for-instruction-encoding-in-the-nop-space%2F&amp;#38;linkname=Guidelines%20for%20instruction%20encoding%20in%20the%20NOP%20space" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fguidelines-for-instruction-encoding-in-the-nop-space%2F&amp;#38;linkname=Guidelines%20for%20instruction%20encoding%20in%20the%20NOP%20space" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fguidelines-for-instruction-encoding-in-the-nop-space%2F&amp;#38;linkname=Guidelines%20for%20instruction%20encoding%20in%20the%20NOP%20space" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fguidelines-for-instruction-encoding-in-the-nop-space%2F&amp;#38;linkname=Guidelines%20for%20instruction%20encoding%20in%20the%20NOP%20space" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fguidelines-for-instruction-encoding-in-the-nop-space%2F&amp;#38;linkname=Guidelines%20for%20instruction%20encoding%20in%20the%20NOP%20space" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F29%2Fguidelines-for-instruction-encoding-in-the-nop-space%2F&amp;#038;title=Guidelines%20for%20instruction%20encoding%20in%20the%20NOP%20space" data-a2a-url="https://developers.redhat.com/blog/2019/07/29/guidelines-for-instruction-encoding-in-the-nop-space/" data-a2a-title="Guidelines for instruction encoding in the NOP space"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/29/guidelines-for-instruction-encoding-in-the-nop-space/"&gt;Guidelines for instruction encoding in the NOP space&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/1djWRPFjiQw" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;More and more CPUs implement new features with instructions that are executed as NOPs (no-operation instructions) on previous CPU generations. This results in some challenges for operating system builders, particularly in the area of legacy software support. An instruction that can be ignored completely by some CPUs does not seem useful, but it turns out [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/29/guidelines-for-instruction-encoding-in-the-nop-space/"&gt;Guidelines for instruction encoding in the NOP space&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/29/guidelines-for-instruction-encoding-in-the-nop-space/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">614477</post-id><dc:creator>Florian Weimer</dc:creator><dc:date>2019-07-29T07:00:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/29/guidelines-for-instruction-encoding-in-the-nop-space/</feedburner:origLink></entry><entry><title>5 principles for deploying your API from a CI/CD pipeline</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2V0lms0OTHE/" /><category term="CI/CD" /><category term="Red Hat 3scale API Management" /><category term="Red Hat Integration" /><category term="ci/cd" /><category term="Continuous Deployment" /><category term="Continuous Integration" /><author><name>Nicolas Massé</name></author><id>https://developers.redhat.com/blog/?p=608917</id><updated>2019-07-26T07:00:47Z</updated><published>2019-07-26T07:00:47Z</published><content type="html">&lt;p&gt;With companies generating more and more revenue through their APIs, these APIs also have become even more critical. Quality and reliability are key goals sought by companies looking for large scale use of their APIs, and those goals are usually supported through well-crafted DevOps processes. Figures from the tech giants make us dizzy: &lt;a href="https://techbeacon.com/devops/10-companies-killing-it-devops"&gt;Amazon is deploying code to production every 11.7 seconds, Netflix deploys thousands of time per day, and Fidelity saved $2.3 million per year with their new release framework&lt;/a&gt;. So, if you have APIs, you might want to deploy your API from a CI/CD pipeline.&lt;/p&gt; &lt;p&gt;Deploying your API from a CI/CD pipeline is a &lt;a href="https://developers.redhat.com/blog/2019/02/25/full-api-lifecycle-management-a-primer/"&gt;key activity of the &amp;#8220;Full API Lifecycle Management&lt;/a&gt;.&amp;#8221; Sitting between the &amp;#8220;Implement&amp;#8221; and &amp;#8220;Secure&amp;#8221; phases, the &amp;#8220;Deploy&amp;#8221; activity encompasses every process needed to bring the API from source code to the production environment. To be more specific, it covers Continuous Integration and Continuous Delivery.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-611237 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-High-Level-view-1024x258.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-High-Level-view-300x76.png" alt="Deploy your API from a CI/CD pipeline - High Level view" width="300" height="76" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-High-Level-view-300x76.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-High-Level-view-768x194.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-High-Level-view-1024x258.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;br /&gt; &lt;span id="more-608917"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;An API is not &amp;#8220;just another piece of software&amp;#8221;&lt;/h2&gt; &lt;p&gt;At Red Hat, we strongly believe an API is not “just another piece of software.&amp;#8221; Instead, we think an API is a software component in conjunction with:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;An interface to communicate with it.&lt;/li&gt; &lt;li&gt;An ecosystem of consumers that communicate with this software.&lt;/li&gt; &lt;li&gt;A relationship with developers consuming this API.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;An API is built, deployed, and managed not just with the usual methods; as a result, deploying your API from a CI/CD pipeline requires additional processes, tools, and skills.&lt;/p&gt; &lt;p&gt;In this article, we will focus on the overarching principles and key steps to deploy your API from a CI/CD pipeline.&lt;/p&gt; &lt;h2&gt;Overarching principles to deploy your API from a CI/CD pipeline&lt;/h2&gt; &lt;h3&gt;1. Use a contract-first approach&lt;/h3&gt; &lt;p&gt;Although a code-first approach does not prevent you from deploying your API from a CI/CD pipeline, using a contract-first approach makes your processes much more reliable and streamlined.&lt;/p&gt; &lt;p&gt;In a contract-first approach, the API contract (for REST APIs the contract is named &amp;#8220;OpenAPI Specification&amp;#8221;) is crafted well ahead of the implementation phase. It is a collaboration between the product owner, the architects, the developers, and the early customers. &lt;a href="https://www.apicur.io/"&gt;The Apicurio Studio can help you easily craft OpenAPI Specifications, collaboratively.&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;2. Ensure the testability of your API&lt;/h3&gt; &lt;p&gt;To deploy your API from a CI/CD pipeline in an automated manner, tests are needed. There are different kinds of tests and a full book would be required to cover them all. To deploy your API from a CI/CD pipeline you would need to have at least:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Unit tests: to test individually each smallest software component.&lt;/li&gt; &lt;li&gt;Integration tests: to test a bigger chunk of software components together.&lt;/li&gt; &lt;li&gt;Acceptance tests: to ensure business expectations are met (as part of the &lt;a href="https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development"&gt;acceptance test-driven development methodology&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;End-to-end tests: to ensure every software component in the chain is working as expected, in a production-like environment.&lt;/li&gt; &lt;li&gt;Performance tests: to ensure the performance is not degraded by a fix or a new feature.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Unit and integration tests are well known from developers. Let&amp;#8217;s focus on the usage of the later ones.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Acceptance tests can be managed from a dedicated tool, such as &lt;a href="https://microcks.github.io/"&gt;Microcks,&lt;/a&gt; and triggered by your CI/CD pipeline.&lt;/li&gt; &lt;li&gt;Performance tests can also be automated as explained in this blog post series: &lt;a href="https://developers.redhat.com/blog/2018/11/22/automated-performance-testing-kubernetes-openshift/"&gt;Leveraging Kubernetes and OpenShift for automated performance tests&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;3. Adhere to the semantic versioning&lt;/h3&gt; &lt;p&gt;When releasing new versions of your API, it is critical to adhere to the &lt;a href="https://semver.org/"&gt;semantic versioning&lt;/a&gt;. It helps your CI/CD pipeline know how to deal with new releases: new minor versions are backward compatible, they can be deployed &amp;#8220;in place&amp;#8221;. Major versions will need to be deployed &amp;#8220;side-by-side&amp;#8221; to keep existing customers happy.&lt;/p&gt; &lt;h3&gt;4. Be idempotent&lt;/h3&gt; &lt;p&gt;When managing software at scale, all tech giants will tell you: stuff happens. Servers fail, routers drop packets, hard disks loose data, etc. One way to be resilient to such kind of events is to be &lt;a href="https://en.wikipedia.org/wiki/Idempotence"&gt;idempotent&lt;/a&gt;. Instead of creating a new service in your API Management solution, state that this service has to be present. Instead of deleting it, state it has to be absent. This way, your pipelines will be reliable in case of outages or transient perturbations.&lt;/p&gt; &lt;p&gt;Most operations of the &lt;a href="https://github.com/3scale/3scale_toolbox"&gt;new 3scale CLI have been designed to be idempotent&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;5. Apply the API-Management-as-Code principles&lt;/h3&gt; &lt;p&gt;Akin to the &amp;#8220;Infrastructure-as-Code&amp;#8221; principle, the &amp;#8220;API-Management-as-Code&amp;#8221; principle says that the state of your API management solution is fully determined by the content of your Git repositories. Services are defined by their OpenAPI apecification file, committed in your Git repository; Application plans are defined in an artefact file, also in your Git repository; and so on with the environment settings, API documentation, etc.&lt;/p&gt; &lt;h2&gt;Steps to deploy your API from a CI/CD pipeline&lt;/h2&gt; &lt;h3&gt;1. Prepare the release&lt;/h3&gt; &lt;p&gt;Since you applied API-Management-as-Code principles, all your artefacts are versioned and stored in a Git repository. To deploy your API from a CI/CD pipeline, start by &lt;strong&gt;checking out the repository.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Inside your Git repository is the API contract. &lt;strong&gt;Read the OpenAPI specification file&lt;/strong&gt; and extract the relevant information for your pipeline:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The field &amp;#8220;info.version&amp;#8221; is useful to apply semantic versioning.&lt;/li&gt; &lt;li&gt;The vendor extension fields (&amp;#8220;x-*&amp;#8221; fields) in the &amp;#8220;info&amp;#8221; object can be used to hold metadata (Business Unit in charge, target channel, state, etc.).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;From the OpenAPI specification, &lt;strong&gt;generate a Mock&lt;/strong&gt; that will be exposed to your early adopters. Later, it will be used by all your API consumers to develop their client implementation. Tools such as &lt;a href="https://microcks.github.io/"&gt;Microcks&lt;/a&gt; can generate a mock from your OpenAPI specification file.&lt;/p&gt; &lt;p&gt;From those data, you can &lt;strong&gt;compute the API versioning and status&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The API is &lt;/span&gt;&lt;b&gt;versioned&lt;/b&gt;&lt;span style="font-weight: 400;"&gt; according to semantic versioning: minor and patch versions are released continuously in place of the previous version. Existing consumers are always using the latest version. Major versions are released side-by-side and the previous API starts its deprecation countdown.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;The API &lt;strong&gt;status&lt;/strong&gt; can be computed from vendor extension fields or free-form metadata. It goes through those successive states :&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Created&lt;/strong&gt;: The API is in working state, present on the developer portal but only accessible to early adopters.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Published&lt;/strong&gt;: The API is GA, anyone can subscribe. The subscription goes through the chosen workflow (with or without approval).&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;: The API is marked as deprecated. This reflects in the Developer Portal. No new third parties can subscribe to this API. API Gateway policies are enabled to communicate the retirement date (through headers or delays for instance).&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Retired&lt;/strong&gt;: The API is removed from the Admin Portal and from the Developer Portal.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;2. Deploy the API&lt;/h3&gt; &lt;p&gt;Based on all this information, you can now &lt;strong&gt;publish the API in your API management solution&lt;/strong&gt;. This will declare a new service or update the existing one and apply the correct configuration.&lt;/p&gt; &lt;p&gt;If your API requires custom API gateway policies, you will have to &lt;strong&gt;build a container image of your API gateway, containing the custom policy&lt;/strong&gt;. The policy code is also stored in your Git repository. Once built, you can &lt;strong&gt;trigger a new deployment &lt;/strong&gt;of the API gateway container.&lt;/p&gt; &lt;h3&gt;3. Test your API&lt;/h3&gt; &lt;p&gt;You can now ensure business expectations are met by &lt;strong&gt;running acceptance tests&lt;/strong&gt; (from the &lt;a href="https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development"&gt;acceptance test-driven development methodology&lt;/a&gt;). A tool such as &lt;a href="https://microcks.github.io/"&gt;Microcks&lt;/a&gt; can help you store, manage and run tests for your APIs. Having all your API test suites stored in one place is convenient: for each minor release, you can run the test suites of all previous releases. Thus ensuring the new release is actually backward compatible with the previous ones.&lt;/p&gt; &lt;p&gt;To deploy your API from a CI/CD pipeline, you will also have to &lt;strong&gt;publish application plans &lt;/strong&gt;from the artefact files stored in your Git repository. Those staged plans are your service offering for API consumers. They hold quotas for each method, pricing rules for monetization, as well as the features list. The application plans are described as YAML files. They can be crafted by hand or from a GUI by the product owner and committed in your Git repository.&lt;/p&gt; &lt;p&gt;Once the application plans are published, you will have to &lt;strong&gt;create a new client application&lt;/strong&gt; that will be used for end-to-end tests. This client application will hold some credentials that you can use to query the deployed API. Those end-to-end tests make sure the whole chain (firewall, reverse proxies, API gateway, admin portal, API back end, load balancers, etc.) are working. To be meaningful, end-to-end tests have to test the newly added API methods.&lt;/p&gt; &lt;h3&gt;4. Release your API&lt;/h3&gt; &lt;p&gt;Your new API release has been deployed! You can now &lt;strong&gt;publish the API documentation&lt;/strong&gt; on your developer portal. You will have to take care of updating the OpenAPI Specification file to match the target environment. For OpenAPI Specification 2.0, this means updating the &lt;em&gt;host&lt;/em&gt;, &lt;em&gt;basePath&lt;/em&gt;, &lt;em&gt;schemes&lt;/em&gt;, but also the &lt;em&gt;securityDefinitions&lt;/em&gt; objects to replace the &lt;em&gt;authorizationUrl&lt;/em&gt; and &lt;em&gt;tokenUrl&lt;/em&gt; with their valid counterparts in the target environment.&lt;/p&gt; &lt;p&gt;The final touch to deploy your API from a CI/CD pipeline would be to &lt;strong&gt;notify your existing API consumers&lt;/strong&gt; that a new minor release has been deployed. You can also send them a public release note if this is part of your processes.&lt;/p&gt; &lt;h2&gt;Rollback&lt;/h2&gt; &lt;p&gt;If something goes wrong during the CI/CD pipeline, you might be interested in rolling back any modification done so far. If you followed our idempotence and API-Management-as-Code principles, this has never been so easy: you can &lt;strong&gt;just trigger a new pipeline run &lt;/strong&gt;of the previous minor release, and the previous state of the system will be restored.&lt;/p&gt; &lt;h2&gt;Environments&lt;/h2&gt; &lt;p&gt;If you have multiple environments in your company (as most, if not all our customers, have), those steps will have to be repeated in each environment.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-611247 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-With-environments-1024x505.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-With-environments-300x148.png" alt="Deploy your API from a CI/CD pipeline - with environments" width="300" height="148" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-With-environments-300x148.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-With-environments-768x379.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-With-environments-1024x505.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;There are some subtleties though:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The first step (release preparation) is done once for all.&lt;/li&gt; &lt;li&gt;The API gateway container image is also built only once and then deployed identically in each environment.&lt;/li&gt; &lt;li&gt;Acceptance tests are run in functional environments whereas end-to-end tests are run in production-like environments (as well as performance tests).&lt;/li&gt; &lt;li&gt;API consumers are notified only in production and production-like environments.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;How many environments you need is entirely up to your internal processes. Some companies are fine with three environments, others need nine environments.&lt;/p&gt; &lt;p&gt;You can leverage the multi-tenant capabilities of the API management solution to handle multiple environments on one installation. However, a separated sandbox (usually in the development environment) is needed to test the N+1 version of the API management solution before applying the update.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;As you can see, a lot of work is needed to deploy your API from a CI/CD pipeline! It is a good idea to choose a solution that comes with a helper CLI handling most of those operations. This way, you can focus on what matters the most: your code implementing business features.&lt;/p&gt; &lt;p&gt;Discover how the API management capability of Red Hat Integration can help you deploy your API from a CI/CD pipeline:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=611307"&gt;3scale toolbox: Deploy an API from the CLI&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=612387"&gt;Deploy your API from a Jenkins Pipeline&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=612407"&gt;Using the 3scale toolbox Jenkins Shared Library&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#038;title=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" data-a2a-url="https://developers.redhat.com/blog/2019/07/26/5-principles-for-deploying-your-api-from-a-ci-cd-pipeline/" data-a2a-title="5 principles for deploying your API from a CI/CD pipeline"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/26/5-principles-for-deploying-your-api-from-a-ci-cd-pipeline/"&gt;5 principles for deploying your API from a CI/CD pipeline&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2V0lms0OTHE" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;With companies generating more and more revenue through their APIs, these APIs also have become even more critical. Quality and reliability are key goals sought by companies looking for large scale use of their APIs, and those goals are usually supported through well-crafted DevOps processes. Figures from the tech giants make us dizzy: Amazon is [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/26/5-principles-for-deploying-your-api-from-a-ci-cd-pipeline/"&gt;5 principles for deploying your API from a CI/CD pipeline&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/26/5-principles-for-deploying-your-api-from-a-ci-cd-pipeline/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">608917</post-id><dc:creator>Nicolas Massé</dc:creator><dc:date>2019-07-26T07:00:47Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/26/5-principles-for-deploying-your-api-from-a-ci-cd-pipeline/</feedburner:origLink></entry><entry><title>DevNation Live: Subatomic reactive systems with Quarkus</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ripgBkVrW58/" /><category term="DevNation" /><category term="Feature" /><category term="Quarkus" /><author><name>Editorial Team</name></author><id>https://developers.redhat.com/blog/?p=612637</id><updated>2019-07-26T06:59:16Z</updated><published>2019-07-26T06:59:16Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;DevNation Live tech talks&lt;/a&gt; are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, &lt;a href="https://developers.redhat.com/videos/youtube/-Cj5EhDZ0fg/"&gt;Clement Escoffier&lt;/a&gt;, Principal Software Engineer at Red Hat, will dive into the reactive side of &lt;a href="https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework/"&gt;Quarkus&lt;/a&gt;.&lt;span id="more-612637"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Quarkus provides a supersonic development experience and a subatomic execution environment thanks to its integration with GraalVM. But, that&amp;#8217;s not all. Quarkus also unifies the imperative and reactive paradigm.&lt;/p&gt; &lt;p&gt;This discussion is about the reactive side of Quarkus and how you can use it to implement reactive and data streaming applications. From WebSockets to Kafka integration and reactive streams, you will learn how to build a reactive system with Quarkus.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/fQMg3Ve6Ep8" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;Learn more&lt;/h3&gt; &lt;p&gt;Join us at an upcoming &lt;a href="https://developers.redhat.com/events/"&gt;developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Live tech talks&lt;/a&gt;&lt;a href="https://developers.redhat.com/events/"&gt;.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#038;title=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" data-a2a-url="https://developers.redhat.com/blog/2019/07/26/devnation-live-subatomic-reactive-systems-with-quarkus/" data-a2a-title="DevNation Live: Subatomic reactive systems with Quarkus"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/26/devnation-live-subatomic-reactive-systems-with-quarkus/"&gt;DevNation Live: Subatomic reactive systems with Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ripgBkVrW58" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Live tech talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, Clement Escoffier, Principal Software Engineer at Red Hat, will dive into the reactive side of Quarkus. Quarkus provides a supersonic development experience [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/26/devnation-live-subatomic-reactive-systems-with-quarkus/"&gt;DevNation Live: Subatomic reactive systems with Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/26/devnation-live-subatomic-reactive-systems-with-quarkus/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">612637</post-id><dc:creator>Editorial Team</dc:creator><dc:date>2019-07-26T06:59:16Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/26/devnation-live-subatomic-reactive-systems-with-quarkus/</feedburner:origLink></entry></feed>
